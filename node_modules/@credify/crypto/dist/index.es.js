/*!
  credify-crypto.js v1.4.4
  https://developers.credify.one
  Released under the MIT License.
*/
import { Crypto } from '@peculiar/webcrypto';
import { decomposePrivateKey, composePrivateKey, decomposePublicKey, composePublicKey } from '@credify/crypto-key-composer';
import { createHash, randomBytes } from 'crypto';
import { pki } from 'node-forge';
import { fromMasterSeed } from 'hdkey';
import { mnemonicToSeedSync, generateMnemonic } from 'bip39';
import { encode } from 'wif';
import { ec } from 'elliptic';
import { PrivateKey, PublicKey } from 'eosjs/dist/eosjs-jssig';
import { KeyType, stringToPublicKey, publicKeyDataSize, binaryToBase58 } from 'eosjs/dist/eosjs-numeric';

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return _assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var headerPrivateKey = "-----BEGIN PRIVATE KEY-----\n";
var footerPrivateKey = "\n-----END PRIVATE KEY-----";
var headerPublicKey = "-----BEGIN PUBLIC KEY-----\n";
var footerPublicKey = "\n-----END PUBLIC KEY-----";
var isArray = function (a) {
    return Array.isArray(a);
};
var isObject = function (o) {
    return o === Object(o) && !isArray(o) && typeof o !== "function";
};
var sha256 = function (value) {
    if (isObject(value) || isArray(value)) {
        var base64_1 = createHash("sha256")
            .update(JSON.stringify(value))
            .digest("base64");
        return base64ToBase64UrlEncoded(base64_1);
    }
    var base64 = createHash("sha256").update(value).digest("base64");
    return base64ToBase64UrlEncoded(base64);
};
var generateCommitment = function (bytes) {
    var b = bytes || 32;
    return base64ToBase64UrlEncoded(randomBytes(b).toString("base64"));
};
var extractBuffer = function (pemString, type) {
    if (type === "public") {
        var formattedPublicKeyPem = pemString.startsWith(headerPublicKey)
            ? pemString.split(headerPublicKey)[1]
            : pemString;
        formattedPublicKeyPem = formattedPublicKeyPem.endsWith(footerPublicKey)
            ? formattedPublicKeyPem.split(footerPublicKey)[0]
            : formattedPublicKeyPem;
        return Buffer.from(formattedPublicKeyPem.replace(/\r/g, ""), "base64");
    }
    else {
        var formattedPrivateKeyPem = pemString.startsWith(headerPrivateKey)
            ? pemString.split(headerPrivateKey)[1]
            : pemString;
        formattedPrivateKeyPem = formattedPrivateKeyPem.endsWith(footerPrivateKey)
            ? formattedPrivateKeyPem.split(footerPrivateKey)[0]
            : formattedPrivateKeyPem;
        return Buffer.from(formattedPrivateKeyPem.replace(/\r/g, ""), "base64");
    }
};
var pemFormat = function (buffer, type) {
    if (type === "public") {
        var base64 = buffer.toString("base64");
        if (base64.includes("\n")) {
            return "" + headerPublicKey + base64 + footerPublicKey;
        }
        else {
            // @ts-ignore
            var key = base64.match(/.{1,64}/g).join("\n");
            return "" + headerPublicKey + key + footerPublicKey;
        }
    }
    else {
        var base64 = buffer.toString("base64");
        if (base64.includes("\n")) {
            return "" + headerPrivateKey + base64 + footerPrivateKey;
        }
        else {
            // @ts-ignore
            var key = base64.match(/.{1,64}/g).join("\n");
            return "" + headerPrivateKey + key + footerPrivateKey;
        }
    }
};
var bufferToBase64UrlEncoded = function (buffer) {
    var base64 = buffer.toString("base64");
    return base64ToBase64UrlEncoded(base64);
};
var base64ToBase64UrlEncoded = function (base64) {
    return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
};
var base64UrlToBase64Encoded = function (base64Url) {
    return padString(base64Url).replace(/\-/g, "+").replace(/_/g, "/");
};
var base64UrlToBuffer = function (base64Url) {
    var base64 = base64UrlToBase64Encoded(base64Url);
    return Buffer.from(base64, "base64");
};
var sha256ByEachField = function (o) {
    if (isObject(o)) {
        var n_1 = {};
        Object.keys(o).forEach(function (k) {
            if (k === "verified") {
                // Ignore `verified` flag
                // @ts-ignore
                n_1[k] = o[k];
                // @ts-ignore
            }
            else if (o[k] === "" || o[k] === null) {
                // Ignore empty values
                // @ts-ignore
                n_1[k] = o[k];
            }
            else {
                // @ts-ignore
                n_1[k] = sha256ByEachField(o[k]);
            }
        });
        return n_1;
    }
    if (isArray(o)) {
        // @ts-ignore
        return o.map(function (i) { return sha256ByEachField(i); });
    }
    return sha256(o);
};
var padString = function (input) {
    var segmentLength = 4;
    var stringLength = input.length;
    var diff = stringLength % segmentLength;
    if (!diff) {
        return input;
    }
    var position = stringLength;
    var padLength = segmentLength - diff;
    var paddedStringLength = stringLength + padLength;
    var buffer = Buffer.alloc(paddedStringLength);
    buffer.write(input);
    while (padLength--) {
        buffer.write("=", position++);
    }
    return buffer.toString();
};
/**
 * Unify the Json data
 * @param data - can be any type
 * Return the ordered json object
 */
var unifyJsonData = function (unorderedObject) {
    if (!unorderedObject) {
        return unorderedObject;
    }
    if (typeof unorderedObject !== "object") {
        return unorderedObject;
    }
    return Object.keys(unorderedObject)
        .sort()
        .reduce(function (res, key) {
        if (Array.isArray(unorderedObject[key])) {
            // @ts-ignore
            res[key] = unorderedObject[key].map(unifyJsonData);
        }
        else if (typeof unorderedObject[key] === "object") {
            // @ts-ignore
            res[key] = unifyJsonData(unorderedObject[key]);
        }
        else {
            // @ts-ignore
            res[key] = unorderedObject[key];
        }
        return res;
    }, {});
};
var toCamel = function (s) {
    return s.replace(/([-_][a-z])/gi, function ($1) {
        return $1.toUpperCase().replace("-", "").replace("_", "");
    });
};
var toSnake = function (s) {
    var result = s.replace(/([A-Z])/g, " $1");
    return result.split(" ").join("_").toLowerCase();
};
var camelize = function (o) {
    if (isObject(o)) {
        var n_2 = {};
        Object.keys(o).forEach(function (k) {
            // @ts-ignore
            n_2[toCamel(k)] = camelize(o[k]);
        });
        return n_2;
    }
    else if (isArray(o)) {
        return o.map(function (i) {
            return camelize(i);
        });
    }
    return o;
};
var decamelize = function (o) {
    if (isObject(o)) {
        var n_3 = {};
        Object.keys(o).forEach(function (k) {
            // @ts-ignore
            n_3[toSnake(k)] = decamelize(o[k]);
        });
        return n_3;
    }
    else if (isArray(o)) {
        return o.map(function (i) {
            return decamelize(i);
        });
    }
    return o;
};

var DEFAULT_KEY_SIZE = 3072;
var Encryption = /** @class */ (function () {
    function Encryption() {
        var checkIsBrowser = new Function("try {return this===window;}catch(e){ return false;}");
        var isBrowser = checkIsBrowser();
        if (isBrowser) {
            this._crypto = crypto;
        }
        else {
            this._crypto = new Crypto();
        }
    }
    Object.defineProperty(Encryption.prototype, "privateKey", {
        get: function () {
            return this._privateKey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Encryption.prototype, "publicKey", {
        get: function () {
            return this._publicKey;
        },
        enumerable: false,
        configurable: true
    });
    Encryption.prototype.generateKeyPair = function (keySize) {
        if (keySize === void 0) { keySize = DEFAULT_KEY_SIZE; }
        return __awaiter(this, void 0, void 0, function () {
            var keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._crypto.subtle.generateKey({
                            name: "RSA-OAEP",
                            hash: "SHA-256",
                            publicExponent: new Uint8Array([1, 0, 1]),
                            modulusLength: keySize,
                        }, true, ["encrypt", "decrypt"])];
                    case 1:
                        keys = _a.sent();
                        this._privateKey = keys.privateKey;
                        this._publicKey = keys.publicKey;
                        return [2 /*return*/];
                }
            });
        });
    };
    Encryption.prototype.importPrivateKey = function (pem, password) {
        return __awaiter(this, void 0, void 0, function () {
            var rawPem, decomposedKey, buffer, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rawPem = pem;
                        if (password) {
                            decomposedKey = decomposePrivateKey("\n" + pem + "\n", {
                                password: password,
                                format: "pkcs8-pem",
                            });
                            // Remove unnecessary property
                            delete decomposedKey["encryptionAlgorithm"];
                            rawPem = composePrivateKey(decomposedKey).replace(/\n$/, "");
                        }
                        buffer = extractBuffer(rawPem, "private");
                        return [4 /*yield*/, this._crypto.subtle.importKey("pkcs8", buffer, {
                                name: "RSA-OAEP",
                                hash: "SHA-256",
                            }, true, ["decrypt"])];
                    case 1:
                        key = _a.sent();
                        this._privateKey = key;
                        return [2 /*return*/];
                }
            });
        });
    };
    Encryption.prototype.importPrivateKeyInBase64Url = function (pem, password) {
        return __awaiter(this, void 0, void 0, function () {
            var rawPem, buffer, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rawPem = base64UrlToBase64Encoded(pem);
                        rawPem = pemFormat(Buffer.from(rawPem, "base64"), "private");
                        if (password) {
                            throw new Error("Password decryption is not supported yet.");
                            // const decomposedKey = decomposePrivateKey(`\n${pem}\n`, { password, format: "pkcs8-pem" });
                            // Remove unnecessary property
                            // delete decomposedKey["encryptionAlgorithm"];
                            // rawPem = composePrivateKey(decomposedKey);
                        }
                        buffer = extractBuffer(rawPem, "private");
                        return [4 /*yield*/, this._crypto.subtle.importKey("pkcs8", buffer, {
                                name: "RSA-OAEP",
                                hash: "SHA-256",
                            }, true, ["decrypt"])];
                    case 1:
                        key = _a.sent();
                        this._privateKey = key;
                        return [2 /*return*/];
                }
            });
        });
    };
    Encryption.prototype.importPublicKey = function (pem) {
        return __awaiter(this, void 0, void 0, function () {
            var buffer, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buffer = extractBuffer(pem, "public");
                        return [4 /*yield*/, this._crypto.subtle.importKey("spki", buffer, {
                                name: "RSA-OAEP",
                                hash: "SHA-256",
                            }, true, ["encrypt"])];
                    case 1:
                        key = _a.sent();
                        this._publicKey = key;
                        return [2 /*return*/];
                }
            });
        });
    };
    Encryption.prototype.importPublicKeyInBase64Url = function (pem) {
        return __awaiter(this, void 0, void 0, function () {
            var base64, buffer, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        base64 = base64UrlToBase64Encoded(pem);
                        buffer = Buffer.from(base64, "base64");
                        return [4 /*yield*/, this._crypto.subtle.importKey("spki", buffer, {
                                name: "RSA-OAEP",
                                hash: "SHA-256",
                            }, true, ["encrypt"])];
                    case 1:
                        key = _a.sent();
                        this._publicKey = key;
                        return [2 /*return*/];
                }
            });
        });
    };
    Encryption.prototype.encrypt = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var enc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._publicKey) {
                            throw new Error("public key is not passed properly.");
                        }
                        return [4 /*yield*/, this._crypto.subtle.encrypt("RSA-OAEP", this._publicKey, data)];
                    case 1:
                        enc = _a.sent();
                        return [2 /*return*/, Buffer.from(new Uint8Array(enc))];
                }
            });
        });
    };
    Encryption.prototype.encryptStringToBase64UrlString = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var enc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._publicKey) {
                            throw new Error("public key is not passed properly.");
                        }
                        return [4 /*yield*/, this.rsaLargeMessageEncrypt(message)];
                    case 1:
                        enc = _a.sent();
                        return [2 /*return*/, bufferToBase64UrlEncoded(enc)];
                }
            });
        });
    };
    Encryption.prototype.encryptFieldByField = function (plain) {
        return __awaiter(this, void 0, void 0, function () {
            var n, keys, _i, keys_1, k, _a, _b, n, _c, plain_1, i, d;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!isObject(plain)) return [3 /*break*/, 5];
                        n = {};
                        keys = Object.keys(plain);
                        _i = 0, keys_1 = keys;
                        _d.label = 1;
                    case 1:
                        if (!(_i < keys_1.length)) return [3 /*break*/, 4];
                        k = keys_1[_i];
                        // @ts-ignore
                        _a = n;
                        _b = k;
                        return [4 /*yield*/, this.encryptFieldByField(plain[k])];
                    case 2:
                        // @ts-ignore
                        _a[_b] = _d.sent();
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, n];
                    case 5:
                        if (!isArray(plain)) return [3 /*break*/, 10];
                        n = [];
                        _c = 0, plain_1 = plain;
                        _d.label = 6;
                    case 6:
                        if (!(_c < plain_1.length)) return [3 /*break*/, 9];
                        i = plain_1[_c];
                        return [4 /*yield*/, this.encryptFieldByField(i)];
                    case 7:
                        d = _d.sent();
                        n.push(d);
                        _d.label = 8;
                    case 8:
                        _c++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/, n];
                    case 10:
                        if (plain === null) {
                            return [2 /*return*/, null];
                        }
                        if (plain === "") {
                            return [2 /*return*/, ""];
                        }
                        if (plain === true) {
                            return [2 /*return*/, true];
                        }
                        if (plain === false) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.encryptStringToBase64UrlString(plain)];
                    case 11: return [2 /*return*/, _d.sent()];
                }
            });
        });
    };
    Encryption.prototype.decrypt = function (cipher) {
        return __awaiter(this, void 0, void 0, function () {
            var dec;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._privateKey) {
                            throw new Error("private key is not passed properly.");
                        }
                        return [4 /*yield*/, this._crypto.subtle.decrypt("RSA-OAEP", this._privateKey, cipher)];
                    case 1:
                        dec = _a.sent();
                        return [2 /*return*/, Buffer.from(dec).toString("utf8")];
                }
            });
        });
    };
    Encryption.prototype.decryptBase64UrlStringToString = function (cipher) {
        return __awaiter(this, void 0, void 0, function () {
            var base64;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        base64 = base64UrlToBase64Encoded(cipher);
                        return [4 /*yield*/, this.rsaLargeMessageDecrypt(Buffer.from(base64, "base64"))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Encryption.prototype.decryptFieldByField = function (cipher) {
        return __awaiter(this, void 0, void 0, function () {
            var n, keys, _i, keys_2, k, _a, _b, n, _c, cipher_1, i, d;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!isObject(cipher)) return [3 /*break*/, 5];
                        n = {};
                        keys = Object.keys(cipher);
                        _i = 0, keys_2 = keys;
                        _d.label = 1;
                    case 1:
                        if (!(_i < keys_2.length)) return [3 /*break*/, 4];
                        k = keys_2[_i];
                        // @ts-ignore
                        _a = n;
                        _b = k;
                        return [4 /*yield*/, this.decryptFieldByField(cipher[k])];
                    case 2:
                        // @ts-ignore
                        _a[_b] = _d.sent();
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, n];
                    case 5:
                        if (!isArray(cipher)) return [3 /*break*/, 10];
                        n = [];
                        _c = 0, cipher_1 = cipher;
                        _d.label = 6;
                    case 6:
                        if (!(_c < cipher_1.length)) return [3 /*break*/, 9];
                        i = cipher_1[_c];
                        return [4 /*yield*/, this.decryptFieldByField(i)];
                    case 7:
                        d = _d.sent();
                        n.push(d);
                        _d.label = 8;
                    case 8:
                        _c++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/, n];
                    case 10:
                        if (cipher === null) {
                            return [2 /*return*/, null];
                        }
                        if (cipher === "") {
                            return [2 /*return*/, ""];
                        }
                        if (cipher === true) {
                            return [2 /*return*/, true];
                        }
                        if (cipher === false) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.decryptBase64UrlStringToString(cipher)];
                    case 11: return [2 /*return*/, _d.sent()];
                }
            });
        });
    };
    Encryption.prototype.exportPrivateKey = function (password) {
        return __awaiter(this, void 0, void 0, function () {
            var data, rawPem, decomposedKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._privateKey) {
                            throw new Error("private key is not instantiated.");
                        }
                        return [4 /*yield*/, this._crypto.subtle.exportKey("pkcs8", this._privateKey)];
                    case 1:
                        data = _a.sent();
                        rawPem = pemFormat(Buffer.from(data), "private");
                        if (!password) {
                            return [2 /*return*/, rawPem];
                        }
                        decomposedKey = decomposePrivateKey("\n" + rawPem + "\n", {
                            format: "pkcs8-pem",
                        });
                        // @ts-ignore
                        decomposedKey["encryptionAlgorithm"] = {
                            keyDerivationFunc: {
                                id: "pbkdf2",
                                iterationCount: 10000,
                                keyLength: 32,
                                prf: "hmac-with-sha256",
                            },
                            encryptionScheme: "aes256-cbc",
                        };
                        return [2 /*return*/, composePrivateKey(decomposedKey, { password: password }).replace(/\n$/, "")];
                }
            });
        });
    };
    Encryption.prototype.exportPrivateKeyInBase64Url = function () {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.exportPrivateKey()];
                    case 1:
                        privateKey = _a.sent();
                        buffer = extractBuffer(privateKey, "private");
                        return [2 /*return*/, bufferToBase64UrlEncoded(buffer)];
                }
            });
        });
    };
    Encryption.prototype.exportPublicKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._publicKey) {
                            throw new Error("public key is not instantiated.");
                        }
                        return [4 /*yield*/, this._crypto.subtle.exportKey("spki", this._publicKey)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, pemFormat(Buffer.from(data), "public")];
                }
            });
        });
    };
    Encryption.prototype.exportPublicKeyInBase64Url = function () {
        return __awaiter(this, void 0, void 0, function () {
            var publicKey, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.exportPublicKey()];
                    case 1:
                        publicKey = _a.sent();
                        buffer = extractBuffer(publicKey, "public");
                        return [2 /*return*/, bufferToBase64UrlEncoded(buffer)];
                }
            });
        });
    };
    Encryption.prototype.rsaLargeMessageEncrypt = function (msg) {
        return __awaiter(this, void 0, void 0, function () {
            var bufferData, keySize, hashSize, blockSize, length, numBlocks, res, i, currentSize, block, bufferEncData, j;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.publicKey) {
                            throw new Error("public key is not passed properly.");
                        }
                        bufferData = Buffer.from(msg, "utf-8");
                        keySize = this.publicKey.algorithm.modulusLength / 8;
                        hashSize = 32;
                        blockSize = keySize - 2 * hashSize - 2;
                        length = bufferData.length;
                        numBlocks = Math.floor(length / blockSize);
                        if (length % blockSize !== 0) {
                            numBlocks += 1;
                        }
                        res = Buffer.alloc(keySize * numBlocks);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < numBlocks)) return [3 /*break*/, 4];
                        currentSize = blockSize;
                        if (bufferData.length < (i + 1) * blockSize) {
                            currentSize = bufferData.length - i * blockSize;
                        }
                        block = bufferData.slice(i * blockSize, i * blockSize + currentSize);
                        return [4 /*yield*/, this.encrypt(block)];
                    case 2:
                        bufferEncData = _a.sent();
                        for (j = i * keySize; j < i * keySize + bufferEncData.length; j++) {
                            res[j] = bufferEncData[j - i * keySize];
                        }
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, res];
                }
            });
        });
    };
    Encryption.prototype.rsaLargeMessageDecrypt = function (cipher) {
        return __awaiter(this, void 0, void 0, function () {
            var keySize, length, numBlocks, res, i, block, pt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.privateKey) {
                            throw new Error("private key is not passed properly.");
                        }
                        keySize = this.privateKey.algorithm.modulusLength / 8;
                        length = cipher.length;
                        if (length % keySize !== 0) {
                            throw new Error("invalid key size");
                        }
                        numBlocks = length / keySize;
                        res = "";
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < numBlocks)) return [3 /*break*/, 4];
                        block = cipher.slice(i * keySize, (i + 1) * keySize);
                        return [4 /*yield*/, this.decrypt(block)];
                    case 2:
                        pt = _a.sent();
                        res += pt;
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, res];
                }
            });
        });
    };
    return Encryption;
}());

var Signing = /** @class */ (function () {
    function Signing() {
    }
    Object.defineProperty(Signing.prototype, "privateKey", {
        get: function () {
            return Buffer.from(this._privateKey);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Signing.prototype, "publicKey", {
        get: function () {
            return Buffer.from(this._publicKey);
        },
        enumerable: false,
        configurable: true
    });
    Signing.prototype.generateKeyPair = function () {
        var keyPair = pki.ed25519.generateKeyPair();
        this._privateKey = keyPair.privateKey;
        this._publicKey = keyPair.publicKey;
    };
    Signing.prototype.importSeed = function (seed) {
        var bytes = base64UrlToBuffer(seed);
        var keyPair = pki.ed25519.generateKeyPair({ seed: bytes });
        this._privateKey = keyPair.privateKey;
        this._publicKey = keyPair.publicKey;
    };
    Signing.prototype.importPrivateKey = function (pem, password) {
        var decomposedKey = decomposePrivateKey("\n" + pem + "\n", { password: password, format: "pkcs8-pem" });
        var seed = decomposedKey.keyData.seed;
        var keyPair = pki.ed25519.generateKeyPair({ seed: seed });
        this._privateKey = keyPair.privateKey;
        this._publicKey = keyPair.publicKey;
    };
    Signing.prototype.importPrivateKeyInBase64Url = function (pem, password) {
        var pemData = base64UrlToBase64Encoded(pem);
        var p = pemFormat(Buffer.from(pemData, "base64"), "private");
        var decomposedKey = decomposePrivateKey("\n" + p + "\n", { password: password, format: "pkcs8-pem" });
        var seed = decomposedKey.keyData.seed;
        var keyPair = pki.ed25519.generateKeyPair({ seed: seed });
        this._privateKey = keyPair.privateKey;
        this._publicKey = keyPair.publicKey;
    };
    Signing.prototype.importPublicKey = function (pem) {
        var decomposedKey = decomposePublicKey("\n" + pem + "\n");
        this._publicKey = decomposedKey.keyData.bytes;
    };
    Signing.prototype.importPublicKeyInBase64Url = function (pem) {
        var pemData = base64UrlToBase64Encoded(pem);
        var p = pemFormat(Buffer.from(pemData, "base64"), "public");
        var decomposedKey = decomposePublicKey("\n" + p + "\n");
        this._publicKey = decomposedKey.keyData.bytes;
    };
    Signing.prototype.sign = function (message, option) {
        if (!this._privateKey)
            throw new Error("Private key is not set yet.");
        var decoded = base64UrlToBuffer(message);
        if ((option === null || option === void 0 ? void 0 : option.input) === "base64") {
            decoded = Buffer.from(message, "base64");
        }
        if ((option === null || option === void 0 ? void 0 : option.input) === "utf8") {
            decoded = Buffer.from(message);
        }
        if ((option === null || option === void 0 ? void 0 : option.input) === "hex") {
            decoded = Buffer.from(message, "hex");
        }
        var base64 = pki.ed25519.sign({ message: decoded, encoding: "binary", privateKey: this._privateKey }).toString("base64");
        if (base64.includes(",")) {
            // FIXME: Next.js was not working well with pki.ed25519.sign's format
            base64 = Buffer.from(base64.split(",").map(Number)).toString("base64");
        }
        if ((option === null || option === void 0 ? void 0 : option.output) === "base64") {
            return base64;
        }
        if ((option === null || option === void 0 ? void 0 : option.output) === "utf8") {
            return Buffer.from(base64, "base64").toString("utf8");
        }
        if ((option === null || option === void 0 ? void 0 : option.output) === "hex") {
            return Buffer.from(base64, "base64").toString("hex");
        }
        // Default is base64URL encoded string
        return base64ToBase64UrlEncoded(base64);
    };
    Signing.prototype.verify = function (message, signature, option) {
        if (!this._publicKey)
            throw new Error("Public key is not set yet.");
        var sig = "";
        if ((option === null || option === void 0 ? void 0 : option.encode) === "base64") {
            sig = signature;
        }
        else {
            // Default is base64URL encoded string
            sig = base64UrlToBase64Encoded(signature);
        }
        return pki.ed25519.verify({
            message: message,
            encoding: "binary",
            signature: Buffer.from(sig, "base64"),
            publicKey: this._publicKey
        });
    };
    Signing.prototype.exportPrivateKey = function (password) {
        if (!this._privateKey) {
            throw new Error("private key is not instantiated.");
        }
        var decomposed = {
            format: 'pkcs8-pem',
            keyAlgorithm: { id: 'ed25519' },
            keyData: {
                seed: this._privateKey.slice(0, 32),
            },
        };
        if (password) {
            // @ts-ignore
            decomposed["encryptionAlgorithm"] = {
                keyDerivationFunc: {
                    id: 'pbkdf2',
                    iterationCount: 10000,
                    keyLength: 32,
                    prf: 'hmac-with-sha256' // The pseudo-random function
                },
                encryptionScheme: 'aes256-cbc',
            };
        }
        return composePrivateKey(decomposed, { password: password }).replace(/\n$/, "");
    };
    Signing.prototype.exportPublicKey = function () {
        if (!this._publicKey) {
            throw new Error("public key is not instantiated.");
        }
        var decomposed = {
            format: 'spki-pem',
            keyAlgorithm: { id: 'ed25519' },
            keyData: {
                bytes: this._publicKey,
            },
        };
        return composePublicKey(decomposed).replace(/\n$/, "");
    };
    Signing.prototype.exportPrivateKeyInBase64Url = function () {
        var privPem = this.exportPrivateKey();
        var buffer = extractBuffer(privPem, "private");
        return bufferToBase64UrlEncoded(buffer);
    };
    Signing.prototype.exportPublicKeyInBase64Url = function () {
        var pubPem = this.exportPublicKey();
        var pubBuffer = extractBuffer(pubPem, "public");
        return bufferToBase64UrlEncoded(pubBuffer);
    };
    Signing.prototype.exportSeed = function () {
        var seedData = this._privateKey.slice(0, 32);
        // @ts-ignore
        return bufferToBase64UrlEncoded(seedData);
    };
    return Signing;
}());

var decodeTokenComponent = function (base64Url) {
    var base64 = base64UrlToBase64Encoded(base64Url);
    return JSON.parse(Buffer.from(base64, "base64").toString("binary"));
};
var encodeTokenComponent = function (json) {
    var base64Encoded = Buffer.from(JSON.stringify(json)).toString("base64");
    return base64ToBase64UrlEncoded(base64Encoded);
};
var composeMessage = function (header, payload) {
    return encodeTokenComponent(header) + "." + encodeTokenComponent(payload);
};
var parseJwt = function (token) {
    var _a = token.split("."), headerEncoded = _a[0], payloadEncoded = _a[1], signature = _a[2];
    var _b = [headerEncoded, payloadEncoded].map(decodeTokenComponent), header = _b[0], payload = _b[1];
    // @ts-ignore
    if (!header["alg"] || !header["typ"]) {
        throw new Error("Header format is not correct.");
    }
    // @ts-ignore
    return { header: header, headerEncoded: headerEncoded, payload: payload, payloadEncoded: payloadEncoded, signature: signature };
};
/**
 * Generates a JWT.
 * @param signing
 * @param payload
 */
var generateJwt = function (signing, payload) {
    // NOTE: Added `- 60` just in case a timestamp in the BE is not working properly.
    var timestamp = Number((new Date().getTime() / 1000).toFixed(0)) - 60;
    var header = {
        alg: "EdDSA",
        typ: "JWT",
    };
    var p = payload || {
        exp: timestamp + 60 * 60,
        iat: timestamp,
        signing_key: signing.exportPublicKey(),
    };
    var signature = signing.sign(composeMessage(header, p), { input: "utf8" });
    return encodeTokenComponent(header) + "." + encodeTokenComponent(p) + "." + signature;
};
/**
 * Generates an approval token
 * @param signing
 * @param clientId
 * @param entityId
 * @param approvedScopes
 * @param offerCode
 */
var generateApprovalToken = function (signing, clientId, entityId, approvedScopes, offerCode) {
    // NOTE: Added `- 60` just in case a timestamp in the BE is not working properly.
    var timestamp = Number((new Date().getTime() / 1000).toFixed(0)) - 60;
    var payload = {
        client_id: clientId,
        iat: timestamp,
        iss: entityId,
        scopes: approvedScopes.join(" "),
    };
    if (offerCode) {
        // @ts-ignore
        payload["offer_code"] = offerCode;
    }
    return generateJwt(signing, payload);
};
/**
 * Generates a claim token and a commitment
 * @param signing
 * @param providerId
 * @param entityId
 * @param scopeName
 * @param claim - claim object with raw values.
 * @returns { token: string; commitment: string }
 */
var generateClaimToken = function (signing, providerId, entityId, scopeName, claim) {
    var _a;
    // NOTE: Added `- 60` just in case a timestamp in the BE is not working properly.
    var timestamp = Number((new Date().getTime() / 1000).toFixed(0)) - 60;
    var commitment = generateCommitment();
    var key = scopeName.includes(":")
        ? scopeName + ":commitment"
        : scopeName + "_commitment";
    var scopeHash = sha256(unifyJsonData(_assign(_assign({}, claim), (_a = {}, _a[key] = commitment, _a))));
    var payload = {
        iat: timestamp,
        iss: providerId,
        user_id: entityId,
        scope_name: scopeName,
        scope_hash: scopeHash,
    };
    var token = generateJwt(signing, payload);
    return { token: token, commitment: commitment };
};
/**
 * Generates a request token
 * @param signing
 * @param encryptionPublicKey - Base64 URL encoded public key
 * @param scopes - Requested scopes list.
 * @param offerCode
 */
var generateRequestToken = function (signing, encryptionPublicKey, scopes, offerCode) {
    if (!scopes.includes("openid")) {
        throw new Error("openid is required.");
    }
    // NOTE: Added `- 60` just in case a timestamp in the BE is not working properly.
    var timestamp = Number((new Date().getTime() / 1000).toFixed(0)) - 60;
    var formattedScopes = scopes.join(" ");
    var payload = {
        encryption_public_key: encryptionPublicKey,
        iat: timestamp,
        scopes: formattedScopes,
    };
    if (offerCode) {
        // @ts-ignore
        payload["offer_code"] = offerCode;
    }
    return generateJwt(signing, payload);
};
/**
 * Generates an identity token
 * @param signing
 * @param entityId
 * @param identitySource
 * @param identityHash
 */
var generateIdentityToken = function (signing, entityId, identitySource, identityHash) {
    // NOTE: Added `- 60` just in case a timestamp in the BE is not working properly.
    var timestamp = Number((new Date().getTime() / 1000).toFixed(0)) - 60;
    var payload = {
        iat: timestamp,
        iss: entityId,
        identity_source: identitySource,
        identity_hash: identityHash,
    };
    return generateJwt(signing, payload);
};
var verifyJwt = function (jwt, signing) {
    var message = jwt.headerEncoded + "." + jwt.payloadEncoded;
    return signing.verify(message, jwt.signature);
};

// @ts-ignore
var ripemd160 = require("eosjs/dist/ripemd").RIPEMD160.hash;
var ecdsa = new ec("secp256k1");
var Wallet = /** @class */ (function () {
    function Wallet(mnemonic) {
        if (mnemonic.split(" ").length !== 12) {
            throw new Error("Mnemonic format is not correct");
        }
        this.mnemonic = mnemonic;
        var seed = mnemonicToSeedSync(this.mnemonic);
        this.masterNode = fromMasterSeed(seed);
    }
    Wallet.create = function () {
        var m = generateMnemonic();
        return new Wallet(m);
    };
    Wallet.prototype.getMnemonic = function () {
        return this.mnemonic;
    };
    Wallet.prototype.getMasterPrivateKey = function () {
        var masterPrivateKey = encode(128, this.masterNode.privateKey, true);
        // console.log(`==> getMasterPrivateKey : ${masterPrivateKey}`);
        return masterPrivateKey;
    };
    Wallet.prototype.getMasterPublicKey = function () {
        var masterPublicKey = this.masterNode.publicKey.toString("hex");
        // console.log(`==> getMasterPublicKey : ${masterPublicKey}`);
        return masterPublicKey;
    };
    Wallet.prototype.getEOSPrivateKey = function () {
        var childNode = this.masterNode.derive(this.getCoinKey("EOS"));
        var ellipticKeyPair = ecdsa.keyFromPrivate(childNode.privateKey);
        var eosPrivateKey = PrivateKey.fromElliptic(ellipticKeyPair, KeyType.k1, ecdsa);
        return eosPrivateKey.toLegacyString();
    };
    Wallet.prototype.getEOSPublicKey = function () {
        var childNode = this.masterNode.derive(this.getCoinKey("EOS"));
        var ellipticKeyPair = ecdsa.keyFromPrivate(childNode.privateKey);
        var eosPublicKey = PublicKey.fromElliptic(ellipticKeyPair, KeyType.k1, ecdsa);
        return this.convertToEosLegacyPublicKey(eosPublicKey);
    };
    Wallet.prototype.getCoinKey = function (coinType) {
        switch (coinType) {
            case "BTC": {
                return "";
            }
            case "EOS": {
                return 'm/44\'/194\'/0\'/0/0';
            }
            case "ETH": {
                return 'm/44\'/60\'/1\'/0/0';
            }
            case "XRP": {
                return "";
            }
        }
    };
    Wallet.prototype.convertToEosLegacyPublicKey = function (publicKey) {
        var keyString = publicKey.toString();
        var key = stringToPublicKey(keyString);
        if (key.type == KeyType.k1 && key.data.length === publicKeyDataSize) {
            var digest = new Uint8Array(ripemd160(key.data));
            var whole = new Uint8Array(publicKeyDataSize + 4);
            for (var i = 0; i < publicKeyDataSize; ++i)
                whole[i] = key.data[i];
            for (var i = 0; i < 4; ++i)
                whole[i + publicKeyDataSize] = digest[i];
            return "EOS" + binaryToBase58(whole);
        }
        else if (key.type == KeyType.r1 && key.data.length === publicKeyDataSize) {
            return keyString;
        }
        else {
            throw new Error("unrecognized public key format");
        }
    };
    return Wallet;
}());

export { Encryption, Signing, Wallet, base64ToBase64UrlEncoded, base64UrlToBase64Encoded, base64UrlToBuffer, bufferToBase64UrlEncoded, camelize, decamelize, generateApprovalToken, generateClaimToken, generateCommitment, generateIdentityToken, generateJwt, generateRequestToken, parseJwt, sha256, sha256ByEachField, unifyJsonData, verifyJwt };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
