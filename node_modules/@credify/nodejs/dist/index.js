'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var crypto = require('@credify/crypto');
var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var CredifyClass = /** @class */ (function () {
    function CredifyClass(config, apiClient, signing) {
        this.config = config;
        this.apiClient = apiClient;
        this.signing = signing;
    }
    return CredifyClass;
}());
var ProductType;
(function (ProductType) {
    ProductType["InsuranceHealthForIndividual"] = "insurance:health-insurance:for-individual";
    ProductType["InsuranceHealthForGroup"] = "insurance:health-insurance:for-group";
    ProductType["InsuranceAutomobileMotorbike"] = "insurance:automobile-insurance:motorbike";
    ProductType["InsuranceAutomobileCar"] = "insurance:automobile-insurance:car";
    ProductType["InsuranceHomeHomeowner"] = "insurance:home-insurance:for-homeowner";
    ProductType["InsuranceHomeHouse"] = "insurance:home-insurance:for-house";
    ProductType["InsuranceHomeRenter"] = "insurance:home-insurance:for-renter";
    ProductType["ConsumerUnsecuredLoanCash"] = "consumer-financing:unsecured-loan:cash";
    ProductType["ConsumerUnsecuredLoanCreditCard"] = "consumer-financing:unsecured-loan:credit-card";
    ProductType["ConsumerUnsecuredLoanBnpl"] = "consumer-financing:unsecured-loan:bnpl";
    ProductType["ConsumerUnsecuredLoanCdLoan"] = "consumer-financing:unsecured-loan:cd-loan";
    ProductType["ConsumerSecuredLoanPayday"] = "consumer-financing:secured-loan:payday";
    ProductType["ConsumerSecuredLoanPoFinancing"] = "consumer-financing:secured-loan:po-financing";
    ProductType["CorporateUnsecuredLoanCash"] = "corporate-financing:unsecured-loan:cash";
    ProductType["CorporateUnsecuredLoanCreditCard"] = "corporate-financing:unsecured-loan:credit-card";
    ProductType["CorporateUnsecuredLoanBnpl"] = "corporate-financing:unsecured-loan:bnpl";
    ProductType["CorporateUnsecuredLoanCdLoan"] = "corporate-financing:unsecured-loan:cd-loan";
    ProductType["CorporateSecuredLoanPayday"] = "corporate-financing:secured-loan:payday";
    ProductType["CorporateSecuredLoanPoFinancing"] = "corporate-financing:secured-loan:po-financing";
    ProductType["CreditCardTraditional"] = "credit-card:traditional";
    ProductType["CreditCardCBCC"] = "credit-card:cbcc";
})(ProductType || (ProductType = {}));

var BNPL_ORDER_PREFIX = "bnpl_order";

var CURRENCY_VALUES = ["USD", "VND", "JPY"];
var DURATION_UNIT = ["UNKNOWN", "DAY", "MONTH", "YEAR"];
var isArray = function (a) {
    return Array.isArray(a);
};
var isObject = function (o) {
    return o === Object(o) && !isArray(o) && typeof o !== "function";
};
var convertJsonValueToString = function (o) {
    if (isObject(o)) {
        var n_1 = {};
        Object.keys(o).forEach(function (k) {
            if (typeof o[k] !== "object") {
                // @ts-ignore
                n_1[k] = "" + o[k];
            }
            else {
                // @ts-ignore
                n_1[k] = convertJsonValueToString(o[k]);
            }
        });
        return n_1;
    }
    else if (isArray(o)) {
        return o.map(function (i) {
            return convertJsonValueToString(i);
        });
    }
    return o;
};
var isObjectNullOrEmpty = function (obj) {
    return obj === null || Object.keys(obj).length === 0;
};
var trimObject = function (o) {
    if (isObject(o)) {
        var trimmed_1 = {};
        Object.keys(o).forEach(function (k) {
            if (typeof o[k] !== "object") {
                // @ts-ignore
                trimmed_1[k] = o[k].replace(/\"/g, "");
            }
            else {
                // @ts-ignore
                trimmed_1[k] = trimObject(o[k]);
            }
        });
        return trimmed_1;
    }
    else if (isArray(o)) {
        return o.map(function (i) {
            return trimObject(i);
        });
    }
    return o;
};
var validateFiatCurrencyObject = function (amount) {
    var c = undefined;
    if (amount && amount.currency) {
        if (CURRENCY_VALUES.includes(amount.currency)) {
            if (amount.value && !isNaN(amount.value)) {
                c = {
                    currency: amount.currency,
                    value: amount.value.toString(),
                };
            }
        }
        else {
            throw new Error("The currency needs to be one of " + CURRENCY_VALUES.join(", "));
        }
    }
    return c;
};
var validateDurationObject = function (duration) {
    var c = undefined;
    if (duration && duration.unit) {
        if (DURATION_UNIT.includes(duration.unit)) {
            if (duration.value && !isNaN(duration.value)) {
                c = {
                    unit: duration.unit,
                    value: duration.value.toString(),
                };
            }
        }
        else {
            throw new Error("The unit needs to be one of " + DURATION_UNIT.join(", "));
        }
    }
    return c;
};
var validateDisbursementClaimKey = function (claimKey) {
    if (claimKey.split(":").length !== 3) {
        return false;
    }
    if (claimKey.split(":")[0] !== BNPL_ORDER_PREFIX) {
        return false;
    }
    return true;
};

var Entity = /** @class */ (function (_super) {
    __extends(Entity, _super);
    function Entity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Entity.prototype.validate = function (profile) {
        if (!profile.name && !profile.localName) {
            throw new Error("Name or Local name needs to be provided.");
        }
        if (profile.emails.length < 1) {
            throw new Error("Email needs to be provided.");
        }
        if (profile.phones.length < 1) {
            throw new Error("Phone needs to be provided.");
        }
        return true;
    };
    Entity.prototype.trim = function (profile) {
        // TODO: trim texts in profile.
        return profile;
    };
    /**
     * Creates a new individual entity.
     * @param profile
     * @param password
     * @param keys - Key pairs can be passed from frontend.
     */
    Entity.prototype.create = function (profile, password, keys) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var encryptionPublicKey, encryptionSecret, signingPublicKey, signingSecret, encryption, signing, payload, res, e_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.validate(profile);
                        if (!password) {
                            throw new Error("Password needs to be provided.");
                        }
                        encryptionPublicKey = "";
                        encryptionSecret = "";
                        signingPublicKey = "";
                        signingSecret = "";
                        if (!keys) return [3 /*break*/, 1];
                        encryptionPublicKey = keys.encryptionPublicKey;
                        encryptionSecret = keys.encryptionSecret;
                        signingPublicKey = keys.signingPublicKey;
                        signingSecret = keys.signingSecret;
                        return [3 /*break*/, 5];
                    case 1:
                        encryption = new crypto.Encryption();
                        return [4 /*yield*/, encryption.generateKeyPair()];
                    case 2:
                        _c.sent();
                        return [4 /*yield*/, encryption.exportPublicKey()];
                    case 3:
                        encryptionPublicKey = _c.sent();
                        return [4 /*yield*/, encryption.exportPrivateKey(password)];
                    case 4:
                        encryptionSecret = _c.sent();
                        signing = new crypto.Signing();
                        signing.generateKeyPair();
                        signingPublicKey = signing.exportPublicKey();
                        signingSecret = signing.exportPrivateKey(password);
                        _c.label = 5;
                    case 5:
                        payload = {
                            profile: this.trim(profile),
                            signingPublicKey: signingPublicKey,
                            signingSecret: signingSecret,
                            encryptionPublicKey: encryptionPublicKey,
                            encryptionSecret: encryptionSecret,
                            password: password,
                        };
                        _c.label = 6;
                    case 6:
                        _c.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.apiClient.post("/idpass/users", __assign({}, crypto.decamelize(payload)))];
                    case 7:
                        res = _c.sent();
                        if (!((_b = (_a = res.data) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.id)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data.id];
                    case 8:
                        e_1 = _c.sent();
                        throw e_1;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return Entity;
}(CredifyClass));

var REQUEST_EXPIRATION_DURATION = 60 * 60;
var CUSTOM_SCOPE_PREFIX = {
    offer: "offer:",
    dop: "dop:",
    bnplOrder: "bnpl_order:",
};
var Claims = /** @class */ (function (_super) {
    __extends(Claims, _super);
    function Claims() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.generateCommitments = function (claims) {
            var scopeNames = Object.keys(claims);
            var value = {};
            scopeNames.forEach(function (scopeName) {
                // @ts-ignore
                value[scopeName] = crypto.generateCommitment();
            });
            return value;
        };
        /**
         * composeBody
         * @param id: string - Organization ID hosting this server
         * @param entityId: string
         * @param claims: any
         * @param commitments: object
         * @example claims:
         * {
         *   "finscore-score": {
         *     "finscore-score:credit-score": 1234,
         *     "finscore-score:social-score": 10
         *   }
         * }
         *
         * @example commitments:
         * {
         *   "finscore-score": "abcdefghijk"
         * }
         */
        _this.claimTokens = function (id, entityId, claims) {
            var scopeNames = Object.keys(claims);
            var commitmentsCompose = {};
            var tokens = scopeNames.map(function (scopeName) {
                var _a = crypto.generateClaimToken(_this.signing, id, entityId, scopeName, claims), token = _a.token, commitment = _a.commitment;
                // @ts-ignore
                commitmentsCompose[scopeName] = commitment;
                return token;
            });
            return {
                claimTokens: tokens,
                commitments: commitmentsCompose,
            };
        };
        return _this;
    }
    /**
     * Push claim tokens
     * This is for Market
     * @param id - Organization ID
     * @param entityId - Subject individual ID
     * @param claims
     */
    Claims.prototype.push = function (id, entityId, claims) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, claimTokens, commitments;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.claimTokens(id, entityId, claims), claimTokens = _a.claimTokens, commitments = _a.commitments;
                        return [4 /*yield*/, this.apiClient.put("/claim-providers/entities/" + entityId + "/claims", {
                                claim_tokens: claimTokens,
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, commitments];
                }
            });
        });
    };
    /**
     * Push claim tokens
     * This is for Market
     * @param id - Organization ID
     * @param entityId - Subject individual ID
     * @param claims
     */
    Claims.prototype.pushDisbursementDocuments = function (id, entityId, claims) {
        return __awaiter(this, void 0, void 0, function () {
            var invalidClaim;
            return __generator(this, function (_a) {
                if (!claims) {
                    throw new Error("Compose claim is not valid.");
                }
                invalidClaim = Object.keys(claims).find(function (key) {
                    return !validateDisbursementClaimKey(key);
                });
                if (invalidClaim) {
                    throw new Error("Compose claim is not valid.");
                }
                return [2 /*return*/, this.push(id, entityId, claims)];
            });
        });
    };
    Claims.prototype.validateRequest = function (accessToken, requestToken, approvalToken) {
        return __awaiter(this, void 0, void 0, function () {
            var now, requestPayload, requiredStandardScopes, grantedScopes, encryptionPublicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        now = Number((new Date().getTime() / 1000).toFixed(0));
                        return [4 /*yield*/, this.validateAccessToken(accessToken)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.validateRequestToken(requestToken, now)];
                    case 2:
                        requestPayload = _a.sent();
                        requiredStandardScopes = requestPayload.scopes.split(" ") || [];
                        return [4 /*yield*/, this.validateApprovalToken(requiredStandardScopes, approvalToken, now)];
                    case 3:
                        grantedScopes = _a.sent();
                        encryptionPublicKey = requestPayload.encryptionPublicKey;
                        return [2 /*return*/, { publicKey: encryptionPublicKey, scopes: grantedScopes }];
                }
            });
        });
    };
    Claims.prototype.validateAccessToken = function (accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res, value, valid0;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            token: accessToken,
                            scope: "oidc_client:read_encrypted_claims",
                        };
                        return [4 /*yield*/, this.apiClient.post("/oauth2/introspect", body)];
                    case 1:
                        res = _a.sent();
                        value = res.data.data;
                        valid0 = (value === null || value === void 0 ? void 0 : value.active) === true;
                        if (!valid0) {
                            throw new Error("Access token is not valid.");
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    Claims.prototype.validateRequestToken = function (requestToken, currentTime) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var requestJwt, requestPayload, requesterKey, pub1, s1, valid1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestJwt = crypto.parseJwt(requestToken);
                        requestPayload = crypto.camelize(requestJwt.payload);
                        if (requestPayload.iat + REQUEST_EXPIRATION_DURATION <= currentTime) {
                            throw new Error("This request is expired.");
                        }
                        if (requestPayload.iat > currentTime) {
                            throw new Error("This request timestamp is invalid.");
                        }
                        return [4 /*yield*/, this.apiClient.get("/entity/public-key?entity_id=" + requestPayload.iss)];
                    case 1:
                        requesterKey = _b.sent();
                        pub1 = ((_a = requesterKey.data.data) === null || _a === void 0 ? void 0 : _a.signing) || "";
                        if (pub1 === "") {
                            throw new Error("Public key is not found.");
                        }
                        s1 = new crypto.Signing();
                        s1.importPublicKey(pub1);
                        valid1 = crypto.verifyJwt(requestJwt, s1);
                        if (!valid1) {
                            throw new Error("Signature of request token is not valid.");
                        }
                        return [2 /*return*/, requestPayload];
                }
            });
        });
    };
    Claims.prototype.validateApprovalToken = function (requiredStandardScopes, approvalToken, currentTime) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var approvalJwt, approvalPayload, grantedScopes, validScopes, approvalKey, pub1, s1, valid1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        approvalJwt = crypto.parseJwt(approvalToken);
                        approvalPayload = crypto.camelize(approvalJwt.payload);
                        if (approvalPayload.iat + REQUEST_EXPIRATION_DURATION <= currentTime) {
                            throw new Error("This request is expired.");
                        }
                        if (approvalPayload.iat > currentTime) {
                            throw new Error("This request timestamp is invalid.");
                        }
                        grantedScopes = approvalPayload.scopes.split(" ") || [];
                        validScopes = requiredStandardScopes.every(function (val) {
                            if (val.startsWith(CUSTOM_SCOPE_PREFIX.offer) ||
                                val.startsWith(CUSTOM_SCOPE_PREFIX.dop) ||
                                val.startsWith(CUSTOM_SCOPE_PREFIX.bnplOrder)) {
                                return true;
                            }
                            return grantedScopes.includes(val);
                        });
                        if (!validScopes) {
                            throw new Error("Granted scopes are not valid.");
                        }
                        return [4 /*yield*/, this.apiClient.get("/entity/public-key?entity_id=" + approvalPayload.iss)];
                    case 1:
                        approvalKey = _b.sent();
                        pub1 = ((_a = approvalKey.data.data) === null || _a === void 0 ? void 0 : _a.signing) || "";
                        if (pub1 === "") {
                            throw new Error("Public key is not found.");
                        }
                        s1 = new crypto.Signing();
                        s1.importPublicKey(pub1);
                        valid1 = crypto.verifyJwt(approvalJwt, s1);
                        if (!valid1) {
                            throw new Error("Signature of approval token is not valid.");
                        }
                        return [2 /*return*/, grantedScopes];
                }
            });
        });
    };
    /**
     * Encrypts claim values with an ephemeral private key.
     * This is for Market.
     * @param claimValues - claim object
     * @param publicKey - pem file or Base64 URL encoded string
     */
    Claims.prototype.encrypt = function (claimValues, publicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var enc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        enc = new crypto.Encryption();
                        if (!publicKey.startsWith("M")) return [3 /*break*/, 2];
                        return [4 /*yield*/, enc.importPublicKeyInBase64Url(publicKey)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, enc.importPublicKey(publicKey)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        claimValues = convertJsonValueToString(claimValues);
                        return [4 /*yield*/, enc.encryptFieldByField(claimValues)];
                    case 5: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Encrypts claim values with an ephemeral private key.
     * This is for Market.
     * @param claimValues - claim object
     * @param publicKey - pem file or Base64 URL encoded string
     * @return Promise<GenerateDisbursementDocumentsDataResponse>
     */
    Claims.prototype.generateDisbursementDocumentsData = function (claimValues, publicKey, providerId, entityId) {
        return __awaiter(this, void 0, void 0, function () {
            var orderId, invalidClaim, signing, token, claimNames, claimSourceKey, result;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        orderId = "";
                        invalidClaim = Object.keys(claimValues).find(function (key) {
                            return !validateDisbursementClaimKey(key);
                        });
                        // Validate claim
                        if (invalidClaim) {
                            throw new Error("Compose claim is not valid.");
                        }
                        orderId = Object.keys(claimValues)[0].split(":")[1];
                        signing = this.signing;
                        return [4 /*yield*/, crypto.generateDisbursementToken(signing, providerId, entityId, claimValues, publicKey)];
                    case 1:
                        token = _b.sent();
                        claimNames = {};
                        Object.keys(claimValues).forEach(function (key) {
                            claimNames[key] = BNPL_ORDER_PREFIX + ":" + orderId;
                            claimNames[key + ":commitment"] = BNPL_ORDER_PREFIX + ":" + orderId;
                        });
                        claimSourceKey = BNPL_ORDER_PREFIX + ":" + orderId;
                        result = {
                            _claim_names: claimNames,
                            _claim_sources: (_a = {},
                                _a[claimSourceKey] = {
                                    JWT: token,
                                },
                                _a),
                        };
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return Claims;
}(CredifyClass));

var hosts = function (config) {
    switch (config.mode) {
        case "production":
            return {
                api: "https://api.credify.one/",
                oidcCore: "https://oidc-core.credify.one/",
                oidcAuth: "https://oidc-auth.credify.one/"
            };
        case "sandbox":
            return {
                api: "https://sandbox-api.credify.dev/",
                oidcCore: "https://sandbox-oidc-core.credify.dev/",
                oidcAuth: "https://sandbox-oidc-auth.credify.dev/"
            };
        case "tis-sandbox":
            return {
                api: "https://shirahama.credify.dev/",
                oidcCore: "https://tis-sandbox-oidc-core.credify.dev/",
                oidcAuth: "https://tis-sandbox-oidc-auth.credify.dev/"
            };
        case "tis-production":
            return {
                api: "https://shirahama.credify.one/",
                oidcCore: "https://tis-oidc-core.credify.one/",
                oidcAuth: "https://tis-oidc-auth.credify.one/"
            };
        case "uat":
            return {
                api: "https://uat-api.credify.dev/",
                oidcCore: "https://uat-oidc-core.credify.dev/",
                oidcAuth: "https://uat-oidc-auth.credify.dev/"
            };
        case "sit":
            return {
                api: "https://sit-api.credify.ninja/",
                oidcCore: "https://sit-oidc-core.credify.ninja/",
                oidcAuth: "https://sit-oidc-auth.credify.ninja/"
            };
        case "development":
            return {
                api: "https://dev-api.credify.ninja/",
                oidcCore: "https://dev-oidc-core.credify.ninja/",
                oidcAuth: "https://dev-oidc-auth.credify.ninja/"
            };
        case "local":
            return {
                api: "http://localhost:8000/",
                oidcCore: "http://localhost:4444/",
                oidcAuth: "http://localhost:3000/"
            };
    }
};
var ecosystemId = function (config) {
    switch (config.mode) {
        case "production":
            return "74e95121-0cd3-4613-9bf5-b9fa65b7a9e1";
        case "sandbox":
            return "62fc5724-3751-4797-be79-605635fa6c93";
        case "uat":
            return "62fc5724-3751-4797-be79-605635fa6c93";
        case "sit":
            return "62fc5724-3751-4797-be79-605635fa6c93";
        case "development":
            return "62fc5724-3751-4797-be79-605635fa6c93";
        case "local":
            return "62fc5724-3751-4797-be79-605635fa6c93";
    }
};

var OIDC = /** @class */ (function (_super) {
    __extends(OIDC, _super);
    function OIDC() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Generates a new OIDC URL.
     * For data consumer
     * @param id - Organization ID hosting this server
     * @param redirectUrl
     * @param scopes
     * @param options
     * @returns { oidcUrl: string, privateKey: string } - this private key is base64 URL encoded data.
     */
    OIDC.prototype.initiateOIDC = function (id, redirectUrl, scopes, options) {
        return __awaiter(this, void 0, void 0, function () {
            var enc, privateKeyInBase64Url, publicKeyInBase64Url, timestamp, formattedScopes, payload, params, requestToken, oidcCore, path, encodedPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!scopes.includes("openid")) {
                            throw new Error("openid is required.");
                        }
                        enc = new crypto.Encryption();
                        return [4 /*yield*/, enc.generateKeyPair()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, enc.exportPrivateKeyInBase64Url()];
                    case 2:
                        privateKeyInBase64Url = _a.sent();
                        return [4 /*yield*/, enc.exportPublicKeyInBase64Url()];
                    case 3:
                        publicKeyInBase64Url = _a.sent();
                        timestamp = Number((new Date().getTime() / 1000).toFixed(0)) - 30;
                        formattedScopes = scopes.join(" ");
                        payload = {
                            iss: id,
                            encryptionPublicKey: publicKeyInBase64Url,
                            iat: timestamp,
                            scopes: formattedScopes,
                        };
                        params = {
                            clientId: id,
                            redirectUri: redirectUrl,
                            scope: formattedScopes,
                            // publicKey: publicKeyInBase64Url,
                            responseType: (options === null || options === void 0 ? void 0 : options.responseType) || "code",
                            responseMode: (options === null || options === void 0 ? void 0 : options.responseMode) || "form_post",
                            state: (options === null || options === void 0 ? void 0 : options.state) || Math.random().toString(),
                            nonce: Math.random().toString(),
                        };
                        if (options === null || options === void 0 ? void 0 : options.offerCode) {
                            // @ts-ignore
                            payload["offerCode"] = options.offerCode;
                        }
                        if (options === null || options === void 0 ? void 0 : options.packageCode) {
                            // @ts-ignore
                            payload["packageCode"] = options.packageCode;
                        }
                        if (options === null || options === void 0 ? void 0 : options.dopCode) {
                            // @ts-ignore
                            payload["dopCode"] = options.dopCode;
                        }
                        if (options === null || options === void 0 ? void 0 : options.userId) {
                            // @ts-ignore
                            params["entityId"] = options.userId;
                        }
                        if (options === null || options === void 0 ? void 0 : options.phoneNumber) {
                            // @ts-ignore
                            params["phoneNumber"] = options.phoneNumber;
                        }
                        requestToken = crypto.generateJwt(this.signing, crypto.decamelize(payload));
                        // @ts-ignore
                        params["requestToken"] = requestToken;
                        oidcCore = hosts(this.config).oidcCore;
                        path = "oauth2/auth?" + new URLSearchParams(crypto.decamelize(params)).toString();
                        encodedPath = path.split("+").join("%20");
                        return [2 /*return*/, {
                                oidcUrl: "" + oidcCore + encodedPath,
                                privateKey: privateKeyInBase64Url,
                            }];
                }
            });
        });
    };
    /**
     * Generates a new access token out of an authorization code.
     * @param id - client ID
     * @param code - Authorization code
     * @param redirectUri
     */
    OIDC.prototype.generateAccessToken = function (id, code, redirectUri) {
        return __awaiter(this, void 0, void 0, function () {
            var type, token, oidcCore, path, body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = "authorization_code";
                        token = crypto.generateJwt(this.signing);
                        oidcCore = hosts(this.config).oidcCore;
                        path = "oauth2/token";
                        body = {
                            code: code,
                            grantType: type,
                            redirectUri: redirectUri,
                            clientSecret: token,
                            clientId: id,
                            clientType: "entity",
                        };
                        return [4 /*yield*/, this.apiClient.formPost("" + oidcCore + path, __assign({}, crypto.decamelize(body)))];
                    case 1:
                        res = _a.sent();
                        // @ts-ignore
                        return [2 /*return*/, res.data];
                }
            });
        });
    };
    /**
     * Gets userinfo from OIDC
     * For data consumer
     * @param accessToken
     * @param privateKey - Base64 URL encoded private key.
     */
    OIDC.prototype.userinfo = function (accessToken, privateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var authorization, oidcCore, path, res, enc, encryptedClaims, sid, sub, signing_public_key, transaction_id, ext, decrypted, trimmed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authorization = "Bearer " + accessToken;
                        oidcCore = hosts(this.config).oidcCore;
                        path = "userinfo";
                        return [4 /*yield*/, this.apiClient.get("" + oidcCore + path, {
                                headers: { authorization: authorization },
                            })];
                    case 1:
                        res = _a.sent();
                        enc = new crypto.Encryption();
                        return [4 /*yield*/, enc.importPrivateKeyInBase64Url(privateKey)];
                    case 2:
                        _a.sent();
                        encryptedClaims = res.data;
                        sid = encryptedClaims.sid;
                        sub = encryptedClaims.sub;
                        signing_public_key = encryptedClaims.signing_public_key;
                        transaction_id = encryptedClaims.transaction_id;
                        ext = encryptedClaims.ext;
                        // @ts-ignore
                        delete encryptedClaims["sid"];
                        // @ts-ignore
                        delete encryptedClaims["sub"];
                        // @ts-ignore
                        delete encryptedClaims["signing_public_key"];
                        // @ts-ignore
                        delete encryptedClaims["transaction_id"];
                        // @ts-ignore
                        delete encryptedClaims["ext"];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, enc.decryptFieldByField(encryptedClaims)];
                    case 4:
                        decrypted = _a.sent();
                        trimmed = trimObject(decrypted);
                        return [2 /*return*/, __assign(__assign({}, trimmed), { sid: sid, sub: sub, signing_public_key: signing_public_key, transaction_id: transaction_id, ext: ext })];
                    case 5:
                        _a.sent();
                        throw new Error("Decryption failed. Please check your private key.");
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return OIDC;
}(CredifyClass));

var OfferConditionKind;
(function (OfferConditionKind) {
    OfferConditionKind["UnknownCondition"] = "UNKNOWN_CONDITION";
    OfferConditionKind["AndCondition"] = "AND_CONDITION";
    OfferConditionKind["EqualityCondition"] = "EQUALITY_CONDITION";
    OfferConditionKind["LargerThanCondition"] = "LARGER_THAN_CONDITION";
    OfferConditionKind["LargerThanOrEqualCondition"] = "LARGER_THAN_OR_EQUAL_CONDITION";
    OfferConditionKind["LessThanCondition"] = "LESS_THAN_CONDITION";
    OfferConditionKind["LessThanOrEqualCondition"] = "LESS_THAN_OR_EQUAL_CONDITION";
    OfferConditionKind["ContainCondition"] = "CONTAIN_CONDITION";
    OfferConditionKind["InRangeCondition"] = "IN_RANGE_CONDITION";
})(OfferConditionKind || (OfferConditionKind = {}));
var ConditionEvaluationResult = /** @class */ (function () {
    function ConditionEvaluationResult() {
    }
    ConditionEvaluationResult.New = function (scope) {
        var instance = new ConditionEvaluationResult();
        instance.rank = 0;
        if (!scope) {
            instance.requestedScopes = new Array();
            instance.usedScopes = new Array();
        }
        else {
            instance.requestedScopes = new Array(scope);
            instance.usedScopes = new Array(scope);
        }
        return instance;
    };
    return ConditionEvaluationResult;
}());
var ConditionEvaluator = /** @class */ (function () {
    function ConditionEvaluator() {
    }
    ConditionEvaluator.New = function (condition) {
        switch (condition.kind) {
            case OfferConditionKind.AndCondition:
                return new AndConditionEvaluator(condition.subconditions);
            case OfferConditionKind.EqualityCondition:
                return new EqualityConditionEvaluator(condition);
            case OfferConditionKind.LargerThanCondition:
                return new LargerThanConditionEvaluator(condition);
            case OfferConditionKind.LargerThanOrEqualCondition:
                return new LargerThanOrEqualConditionEvaluator(condition);
            case OfferConditionKind.LessThanCondition:
                return new LessThanConditionEvaluator(condition);
            case OfferConditionKind.LessThanOrEqualCondition:
                return new LessThanOrEqualConditionEvaluator(condition);
            case OfferConditionKind.ContainCondition:
                return new ContainConditionEvaluator(condition);
            case OfferConditionKind.InRangeCondition:
                return new InRangeConditionEvaluator(condition);
            default:
                return new DefaultConditionEvaluator(condition);
        }
    };
    ConditionEvaluator.ExtractClaimValue = function (claimDef, claims) {
        var e_1, _a;
        if (!claims.hasOwnProperty(claimDef.scope.name)) {
            return null;
        }
        var scopeValue = claims[claimDef.scope.name];
        if (scopeValue == null) {
            return null;
        }
        var claimDefinitions = new Array();
        while (claimDef != null) {
            claimDefinitions.unshift(claimDef);
            claimDef = claimDef.main;
        }
        var claimValue = null;
        var claimValues = scopeValue;
        try {
            for (var claimDefinitions_1 = __values(claimDefinitions), claimDefinitions_1_1 = claimDefinitions_1.next(); !claimDefinitions_1_1.done; claimDefinitions_1_1 = claimDefinitions_1.next()) {
                var def = claimDefinitions_1_1.value;
                if (claimValues == null) {
                    return null;
                }
                if (!claimValues.hasOwnProperty(def.name)) {
                    return null;
                }
                claimValue = claimValues[def.name];
                claimValues = claimValue;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (claimDefinitions_1_1 && !claimDefinitions_1_1.done && (_a = claimDefinitions_1.return)) _a.call(claimDefinitions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return claimValue;
    };
    ConditionEvaluator.EvaluateValue = function (claimValue, evaluator, conditionValue, conditionValue2) {
        return evaluator.apply(void 0, __spread([claimValue, conditionValue, conditionValue2]));
    };
    return ConditionEvaluator;
}());
/* abstract */
var ValueConditionEvaluator = /** @class */ (function () {
    function ValueConditionEvaluator(condition) {
        this.Claim = condition.claim;
        this.Value = condition.value;
    }
    ValueConditionEvaluator.prototype.typesGuard = function (type, itemsNeedToChecks) {
        var e_2, _a;
        try {
            for (var itemsNeedToChecks_1 = __values(itemsNeedToChecks), itemsNeedToChecks_1_1 = itemsNeedToChecks_1.next(); !itemsNeedToChecks_1_1.done; itemsNeedToChecks_1_1 = itemsNeedToChecks_1.next()) {
                var item = itemsNeedToChecks_1_1.value;
                var itemType = typeof item;
                if (itemType !== type) {
                    return false;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (itemsNeedToChecks_1_1 && !itemsNeedToChecks_1_1.done && (_a = itemsNeedToChecks_1.return)) _a.call(itemsNeedToChecks_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return true;
    };
    ValueConditionEvaluator.prototype.EvaluateValue = function (claims, evaluator) {
        var result = ConditionEvaluationResult.New(this.Claim.scope.name);
        var claimValue = ConditionEvaluator.ExtractClaimValue(this.Claim, claims);
        if (claimValue == null) {
            return result;
        }
        if (ConditionEvaluator.EvaluateValue(claimValue, evaluator, this.Value)) {
            result.rank = 1;
        }
        return result;
    };
    return ValueConditionEvaluator;
}());
var EqualityConditionEvaluator = /** @class */ (function (_super) {
    __extends(EqualityConditionEvaluator, _super);
    function EqualityConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    EqualityConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        var _a;
        switch (this.Claim.valueType) {
            case "BOOLEAN": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("boolean", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue === conditionValue;
                });
            }
            case "FLOAT":
            case "INTEGER": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("number", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue === conditionValue;
                });
            }
            case "TEXT": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("string", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue === conditionValue;
                });
            }
            default:
                return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        }
    };
    return EqualityConditionEvaluator;
}(ValueConditionEvaluator));
var LessThanConditionEvaluator = /** @class */ (function (_super) {
    __extends(LessThanConditionEvaluator, _super);
    function LessThanConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    LessThanConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        var _a;
        switch (this.Claim.valueType) {
            case "FLOAT":
            case "INTEGER": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("number", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue < conditionValue;
                });
            }
            default:
                return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        }
    };
    return LessThanConditionEvaluator;
}(ValueConditionEvaluator));
var LessThanOrEqualConditionEvaluator = /** @class */ (function (_super) {
    __extends(LessThanOrEqualConditionEvaluator, _super);
    function LessThanOrEqualConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    LessThanOrEqualConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        var _a;
        switch (this.Claim.valueType) {
            case "FLOAT":
            case "INTEGER": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("number", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue <= conditionValue;
                });
            }
            default:
                return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        }
    };
    return LessThanOrEqualConditionEvaluator;
}(ValueConditionEvaluator));
var LargerThanConditionEvaluator = /** @class */ (function (_super) {
    __extends(LargerThanConditionEvaluator, _super);
    function LargerThanConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    LargerThanConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        var _a;
        switch (this.Claim.valueType) {
            case "FLOAT":
            case "INTEGER": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("number", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue > conditionValue;
                });
            }
            default:
                return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        }
    };
    return LargerThanConditionEvaluator;
}(ValueConditionEvaluator));
var LargerThanOrEqualConditionEvaluator = /** @class */ (function (_super) {
    __extends(LargerThanOrEqualConditionEvaluator, _super);
    function LargerThanOrEqualConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    LargerThanOrEqualConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        var _a;
        switch (this.Claim.valueType) {
            case "FLOAT":
            case "INTEGER": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
                    if (!_this.typesGuard("number", [claimValue, conditionValue])) {
                        return false;
                    }
                    return claimValue >= conditionValue;
                });
            }
            default:
                return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        }
    };
    return LargerThanOrEqualConditionEvaluator;
}(ValueConditionEvaluator));
var InRangeConditionEvaluator = /** @class */ (function (_super) {
    __extends(InRangeConditionEvaluator, _super);
    function InRangeConditionEvaluator(condition) {
        var _this = _super.call(this, condition) || this;
        _this.UpperValue = condition.upper;
        return _this;
    }
    InRangeConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        var _a;
        switch (this.Claim.valueType) {
            case "FLOAT":
            case "INTEGER": {
                return this.EvaluateValue(claims, function () {
                    var _a = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _a[_i] = arguments[_i];
                    }
                    var _b = __read(_a, 3), claimValue = _b[0], conditionValue = _b[1], upperValue = _b[2];
                    if (!_this.typesGuard("number", [claimValue, conditionValue])) {
                        return false;
                    }
                    return conditionValue <= claimValue && claimValue <= upperValue;
                });
            }
            default:
                return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        }
    };
    InRangeConditionEvaluator.prototype.EvaluateValue = function (claims, evaluator) {
        var _a;
        var result = ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
        var claimValue = ConditionEvaluator.ExtractClaimValue(this.Claim, claims);
        if (claimValue == null) {
            return result;
        }
        if (ConditionEvaluator.EvaluateValue(claimValue, evaluator, this.Value, this.UpperValue)) {
            result.rank = 1;
        }
        return result;
    };
    return InRangeConditionEvaluator;
}(ValueConditionEvaluator));
var ContainConditionEvaluator = /** @class */ (function (_super) {
    __extends(ContainConditionEvaluator, _super);
    function ContainConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    ContainConditionEvaluator.prototype.Evaluate = function (claims) {
        var _this = this;
        return this.EvaluateValue(claims, function () {
            var _a = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _a[_i] = arguments[_i];
            }
            var _b = __read(_a, 2), claimValue = _b[0], conditionValue = _b[1];
            if (!_this.typesGuard("string", [claimValue, conditionValue])) {
                return false;
            }
            return claimValue.includes(conditionValue);
        });
    };
    return ContainConditionEvaluator;
}(ValueConditionEvaluator));
var DefaultConditionEvaluator = /** @class */ (function (_super) {
    __extends(DefaultConditionEvaluator, _super);
    function DefaultConditionEvaluator(condition) {
        return _super.call(this, condition) || this;
    }
    DefaultConditionEvaluator.prototype.Evaluate = function (claims) {
        var _a;
        return ConditionEvaluationResult.New((_a = this.Claim.scope) === null || _a === void 0 ? void 0 : _a.name);
    };
    return DefaultConditionEvaluator;
}(ValueConditionEvaluator));
var LogicalConditionEvaluator = /** @class */ (function () {
    function LogicalConditionEvaluator(subconditions) {
        this.Children =
            subconditions != null
                ? subconditions.map(function (x) { return ConditionEvaluator.New(x); })
                : [];
    }
    return LogicalConditionEvaluator;
}());
var AndConditionEvaluator = /** @class */ (function (_super) {
    __extends(AndConditionEvaluator, _super);
    function AndConditionEvaluator(subconditions) {
        return _super.call(this, subconditions) || this;
    }
    AndConditionEvaluator.prototype.Evaluate = function (claims) {
        var e_3, _a;
        var result = ConditionEvaluationResult.New();
        if (this.Children.length == 0) {
            return result;
        }
        result.rank = 1;
        try {
            for (var _b = __values(this.Children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var childResult = child.Evaluate(claims);
                result.requestedScopes = __spread(result.requestedScopes, childResult.requestedScopes);
                //  main condition is failed already, stop processing further
                if (result.rank == 0) {
                    continue;
                }
                result.usedScopes = __spread(result.usedScopes, childResult.usedScopes);
                if (childResult.rank <= 0) {
                    //  now the child condition failed, main condition is set as failed as well
                    result.rank = 0;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
    };
    return AndConditionEvaluator;
}(LogicalConditionEvaluator));

var ONBOARDING_STATUS = {
    pending: "PENDING",
    completed: "COMPLETED",
    failed: "FAILED",
};
var OFFER_STATUS = {
    approved: "APPROVED",
    rejected: "REJECTED",
    inReview: "IN_REVIEW",
};
var CAMPAIGN_STATUS = {
    approved: "APPROVED",
    rejected: "REJECTED",
    inReview: "IN_REVIEW",
    archived: "ARCHIVED",
    draft: "DRAFT",
};
var Offer = /** @class */ (function (_super) {
    __extends(Offer, _super);
    function Offer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a list of offers after filtering for a specific user.
     * @param id - ID in your service.
     * @param options - phoneNumber (e.g. 32123456789 - no 0 at the head), countryCode (e.g. +84 - needs +), credifyId (ID in Credify system).
     */
    Offer.prototype.getList = function (id, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var payload, number, code, res, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        payload = { localId: id };
                        if (options === null || options === void 0 ? void 0 : options.phoneNumber) {
                            number = options.phoneNumber.startsWith("0")
                                ? options.phoneNumber.split("0")[1]
                                : options.phoneNumber;
                            payload.phoneNumber = number;
                        }
                        if (options === null || options === void 0 ? void 0 : options.countryCode) {
                            code = options.countryCode.startsWith("+")
                                ? options.countryCode
                                : "+" + options.countryCode;
                            payload.countryCode = code;
                        }
                        if (options === null || options === void 0 ? void 0 : options.credifyId) {
                            payload.credifyId = options.credifyId;
                        }
                        if (options === null || options === void 0 ? void 0 : options.productTypes) {
                            payload.productTypes = options.productTypes;
                        }
                        return [4 /*yield*/, this.apiClient.post("/claim-providers/offers", __assign({}, crypto.decamelize(payload)))];
                    case 1:
                        res = _b.sent();
                        if (!((_a = res.data.data) === null || _a === void 0 ? void 0 : _a.offers)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 2:
                        e_1 = _b.sent();
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates a status of an offer transaction
     * @param id - ID of offer approval
     * @param status - To which status you will update. (PENDING, COMPLETED, FAILED)
     * @param transactionAmount - Optional. Premium value in the case of insurance without VAT
     * @param referenceId - Optional. Reference ID generated inside the service provider
     * @param vat - Optional. value associated with this transaction
     * @returns Promise<boolean>
     */
    Offer.prototype.updateStatus = function (id, status, transactionAmount, referenceId, vat) {
        return __awaiter(this, void 0, void 0, function () {
            var acceptableStatuses, body, res, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!id) {
                            throw new Error("ID should not be blank");
                        }
                        acceptableStatuses = Object.values(ONBOARDING_STATUS);
                        if (!acceptableStatuses.includes(status)) {
                            throw new Error("The status needs to be one of " + acceptableStatuses.join(", "));
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        body = {
                            onboardingStatus: status,
                            transactionAmount: validateFiatCurrencyObject(transactionAmount),
                            referenceId: referenceId,
                            vat: validateFiatCurrencyObject(vat),
                        };
                        return [4 /*yield*/, this.apiClient.put("/oidc-clients/offers/transactions/" + id + "/status", crypto.decamelize(body))];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, res.data.success === true];
                    case 3:
                        error_1 = _a.sent();
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets a list of campaigns you have created.
     * @param offerStatus - Status of offers (APPROVED, REJECTED, IN_REVIEW)
     * @param campaignStatus - Status of campaigns (APPROVED, REJECTED, IN_REVIEW, ARCHIVED, DRAFT)
     * @returns array of campaign object
     */
    Offer.prototype.getCampaigns = function (_a) {
        var _b, _c;
        var _d = _a === void 0 ? {} : _a, offerStatus = _d.offerStatus, campaignStatus = _d.campaignStatus;
        return __awaiter(this, void 0, void 0, function () {
            var acceptableOfferStatuses, acceptableCampaignStatuses, query, res, error_2;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        offerStatus = offerStatus || OFFER_STATUS.approved;
                        campaignStatus = campaignStatus || CAMPAIGN_STATUS.approved;
                        acceptableOfferStatuses = Object.values(OFFER_STATUS);
                        if (!acceptableOfferStatuses.includes(offerStatus)) {
                            throw new Error("The status needs to be one of " + acceptableOfferStatuses.join(", "));
                        }
                        acceptableCampaignStatuses = Object.values(CAMPAIGN_STATUS);
                        if (!acceptableCampaignStatuses.includes(campaignStatus)) {
                            throw new Error("The status needs to be one of " + acceptableCampaignStatuses.join(", "));
                        }
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 3, , 4]);
                        query = "page=1&limit=100&campaign_status=" + campaignStatus + "&offer_status=" + offerStatus;
                        return [4 /*yield*/, this.apiClient.get("/oidc-clients/campaigns?" + query)];
                    case 2:
                        res = _e.sent();
                        if (!((_c = (_b = res.data) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.campaigns)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data.campaigns];
                    case 3:
                        error_2 = _e.sent();
                        console.log(error_2);
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets a detail of a specified offer
     * @param offerCode
     * @returns Offer detail info
     */
    Offer.prototype.getOfferDetail = function (offerCode) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!offerCode) {
                            throw new Error("Offer code should not be blank");
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.apiClient.get("/oidc-clients/offers/" + offerCode)];
                    case 2:
                        res = _b.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        // @ts-ignore
                        return [2 /*return*/, res.data.data.offer];
                    case 3:
                        error_3 = _b.sent();
                        throw error_3;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Evaluate offer conditions based on scope definitions and user's claims.
     * @param conditions Offer conditions to evaluate
     * @param requiredCustomScopes Required custom scopes for each levels
     * @param userClaims Value of user claims to evaluate against
     * @returns evaluation result
     */
    Offer.prototype.evaluateOffer = function (conditions, requiredCustomScopes, userClaims) {
        var e_2, _a;
        if (conditions == null ||
            requiredCustomScopes == null ||
            userClaims == null) {
            return {
                rank: 0,
            };
        }
        var maxLevel = Math.max(conditions.length, requiredCustomScopes.length);
        if (maxLevel === 0) {
            return {
                rank: 0,
            };
        }
        var finalRank = null;
        var result = ConditionEvaluationResult.New();
        for (var i = 0; i < maxLevel; i++) {
            var conditionResult = ConditionEvaluationResult.New();
            conditionResult.rank = 1;
            if (i < conditions.length) {
                var condition = conditions[i];
                if (!isObjectNullOrEmpty(condition)) {
                    if (typeof condition === "object") {
                        condition = crypto.camelize(condition);
                    }
                    var evaluator = ConditionEvaluator.New(condition);
                    conditionResult = evaluator.Evaluate(userClaims);
                }
            }
            var scopeResult = ConditionEvaluationResult.New();
            scopeResult.rank = 1;
            if (i < requiredCustomScopes.length) {
                var currentRequiredScopes = requiredCustomScopes[i];
                if (currentRequiredScopes != null) {
                    scopeResult.requestedScopes = currentRequiredScopes;
                    scopeResult.usedScopes = currentRequiredScopes;
                    try {
                        for (var currentRequiredScopes_1 = (e_2 = void 0, __values(currentRequiredScopes)), currentRequiredScopes_1_1 = currentRequiredScopes_1.next(); !currentRequiredScopes_1_1.done; currentRequiredScopes_1_1 = currentRequiredScopes_1.next()) {
                            var requiredScope = currentRequiredScopes_1_1.value;
                            if (!userClaims.hasOwnProperty(requiredScope)) {
                                scopeResult.rank = 0;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (currentRequiredScopes_1_1 && !currentRequiredScopes_1_1.done && (_a = currentRequiredScopes_1.return)) _a.call(currentRequiredScopes_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            result.requestedScopes = __spread(result.requestedScopes, conditionResult.requestedScopes, scopeResult.requestedScopes);
            if (finalRank != null) {
                //  failed at previous level, just continue
                continue;
            }
            if (conditionResult.rank > 0 && scopeResult.rank > 0) {
                //  level passed, add used scopes
                result.usedScopes = __spread(result.usedScopes, conditionResult.usedScopes, scopeResult.usedScopes);
            }
            else {
                //  set max rank as current level is failed now
                finalRank = i;
            }
        }
        //  if all passed, rank should be max level
        if (finalRank == null) {
            finalRank = maxLevel;
        }
        return {
            /** This user's level. Its min is 0, while its max is the number of `levels`. */
            rank: finalRank,
            requestedScopes: __spread(new Set(result.requestedScopes)),
            usedScopes: __spread(new Set(result.usedScopes)),
        };
    };
    /**
     * Get completed bnpl providers
     * @param credifyId credify id
     * @returns Get CompletedBnplProvidersResponse
     */
    Offer.prototype.getCompletedBnplProviders = function (credifyId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, data, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.apiClient.get("/integration/bnpl-consumers/completed-bnpl-providers?credify_id=" + credifyId)];
                    case 1:
                        res = _a.sent();
                        data = res.data;
                        return [2 /*return*/, crypto.decamelize(data)];
                    case 2:
                        e_3 = _a.sent();
                        throw e_3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get bnpl info
     * @param id - ID in your service.
     * @param options - phoneNumber (e.g. 32123456789 - no 0 at the head), countryCode (e.g. +84 - needs +), credifyId (ID in Credify system), phoneTypes (e.g. ["consumer-financing:unsecured-loan:bnpl"]).
     */
    Offer.prototype.getBNPLInfo = function (id, options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var data, completedProviders, data_1, isAvailable, result, e_4;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.getList(id === null || id === void 0 ? void 0 : id.toString(), options)];
                    case 1:
                        data = _c.sent();
                        completedProviders = [];
                        if (!(options === null || options === void 0 ? void 0 : options.credifyId)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getCompletedBnplProviders(options === null || options === void 0 ? void 0 : options.credifyId)];
                    case 2:
                        data_1 = (_c.sent()).data;
                        if ((_a = data_1 === null || data_1 === void 0 ? void 0 : data_1.providers) === null || _a === void 0 ? void 0 : _a.length) {
                            completedProviders = data_1.providers;
                        }
                        _c.label = 3;
                    case 3:
                        isAvailable = !!(((_b = data === null || data === void 0 ? void 0 : data.offers) === null || _b === void 0 ? void 0 : _b.length) || completedProviders.length);
                        result = {
                            isAvailable: isAvailable,
                            offers: (data === null || data === void 0 ? void 0 : data.offers) || [],
                            providers: completedProviders,
                        };
                        return [2 /*return*/, result];
                    case 4:
                        e_4 = _c.sent();
                        throw e_4;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * get simulation
     * @param productType - type of product
     * @param providerIds - list provider to filter
     * @param inputs - extra data
     * @returns object
     */
    Offer.prototype.simulate = function (productType, providerIds, inputs) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var payload, res, error_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        payload = {
                            providerIds: providerIds,
                            inputs: inputs,
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.apiClient.post("/claim-providers/products/" + productType + "/simulation", crypto.decamelize(payload))];
                    case 2:
                        res = _b.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 3:
                        error_4 = _b.sent();
                        console.log(error_4);
                        throw error_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return Offer;
}(CredifyClass));

var Auth = /** @class */ (function (_super) {
    __extends(Auth, _super);
    function Auth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Introspects access token
     * @param token
     * @param scope
     */
    Auth.prototype.introspectToken = function (token, scope) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var body, res, resBody;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        body = {
                            token: token,
                            scope: scope,
                        };
                        return [4 /*yield*/, this.apiClient.post("/oauth2/introspect", body)];
                    case 1:
                        res = _b.sent();
                        resBody = res.data;
                        // @ts-ignore
                        return [2 /*return*/, ((_a = resBody.data) === null || _a === void 0 ? void 0 : _a.active) === true];
                }
            });
        });
    };
    /**
     * Introspects an access token with the result returning
     * @param token
     * @returns Promise<any> Any here should be a json object with the schema like { data: { active: true, client_id: '', scope: '', ... } }
     */
    Auth.prototype.introspectTokenReturnResult = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            token: token,
                        };
                        return [4 /*yield*/, this.apiClient.post("/oauth2/introspect", body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        });
    };
    /**
     * Verifies webhook that is sent by Credify.
     * This function checks if the signature is actually signed by Credify.
     * @param signature You can get it from webhook HTTP request header
     * @param body Webhook HTTP request body
     * @param endpoint You can get it from webhook HTTP request header
     * @param eventId You can get it from webhook HTTP request header
     * @param timestamp You can get it from webhook HTTP request header
     * @returns Promise<boolean> Whether this request is valid or not.
     */
    Auth.prototype.verifyWebhook = function (signature, body, endpoint, eventId, timestamp) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var id, ecosystemKey, pub, s, method, payload, message, valid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = ecosystemId(this.config);
                        return [4 /*yield*/, this.apiClient.get("/entity/public-key?entity_id=" + id)];
                    case 1:
                        ecosystemKey = _b.sent();
                        pub = ((_a = ecosystemKey.data.data) === null || _a === void 0 ? void 0 : _a.signing) || "";
                        if (pub === "") {
                            throw new Error("Public key is not found.");
                        }
                        s = new crypto.Signing();
                        s.importPublicKey(pub);
                        method = "POST";
                        payload = crypto.sha256(body);
                        message = method + "\n" + endpoint + "\n" + eventId + "\n" + timestamp + "\n" + payload;
                        valid = s.verify(message, signature, { encode: "base64Url" });
                        if (!valid) {
                            throw new Error("Signature of webhook request is not valid.");
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    return Auth;
}(CredifyClass));

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

var Bnpl = /** @class */ (function (_super) {
    __extends(Bnpl, _super);
    function Bnpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a Bnpl order
     * @param referenceId - Id of the order
     * @param totalAmount - Total amount of the order
     * @param orderLines - Order's orderlines
     * @param paymentRecipient - The bank account's information of the payment recipient
     * @returns order object
     */
    Bnpl.prototype.createOrder = function (referenceId, totalAmount, orderLines, paymentRecipient) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var orderLines_1, orderLines_1_1, o, payload, res, error_1;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        orderLines = crypto.camelize(orderLines);
                        try {
                            for (orderLines_1 = __values(orderLines), orderLines_1_1 = orderLines_1.next(); !orderLines_1_1.done; orderLines_1_1 = orderLines_1.next()) {
                                o = orderLines_1_1.value;
                                if (o.unitPrice) {
                                    o.unitPrice = validateFiatCurrencyObject(o.unitPrice);
                                }
                                if (o.subtotal) {
                                    o.subtotal = validateFiatCurrencyObject(o.subtotal);
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (orderLines_1_1 && !orderLines_1_1.done && (_b = orderLines_1.return)) _b.call(orderLines_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        payload = {
                            referenceId: referenceId,
                            totalAmount: validateFiatCurrencyObject(totalAmount),
                            orderLines: orderLines,
                            paymentRecipient: paymentRecipient,
                        };
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.apiClient.post("/integration/bnpl-consumers/orders", crypto.decamelize(payload))];
                    case 2:
                        res = _c.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 3:
                        error_1 = _c.sent();
                        console.log(error_1);
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Bnpl orders
     * @param credifyId - CredifyId of the user
     * @returns List of orders associated with the CredifyId
     */
    Bnpl.prototype.getOrders = function (credifyId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!credifyId) {
                            throw new Error("The CredifyId must be provided");
                        }
                        if (!validate(credifyId)) {
                            throw new Error("The CredifyId must be in an UUID format");
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.apiClient.get("/integration/bnpl-consumers/orders?credify_id=" + credifyId)];
                    case 2:
                        res = _c.sent();
                        if (!((_b = (_a = res.data) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.orders)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data.orders];
                    case 3:
                        error_2 = _c.sent();
                        console.log(error_2);
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets order's information
     * @param orderId - Id of the Order
     * @returns order object
     */
    Bnpl.prototype.getOrder = function (orderId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.apiClient.get("/integration/bnpl-providers/orders/" + orderId)];
                    case 1:
                        res = _b.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 2:
                        error_3 = _b.sent();
                        console.log(error_3);
                        throw error_3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Complete the bnpl order
     * @param orderId - Id of the Order
     * @param creditLimit - Credit limit of the payment plan
     * @param apr - Annual percentage rate
     * @param repaymentDuration - Duration of the repayment
     * @param repaymentInterval - Interval of the repayment
     * @param overduePenaltyRate - Penalty rate in case of overdue
     * @param bnplAccountNumber - Account number created for the payer
     * @param payerId - ExternalId of payer
     */
    Bnpl.prototype.completeOrder = function (orderId, creditLimit, apr, repaymentDuration, repaymentInterval, overduePenaltyRate, bnplAccountNumber, payerId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var payload, res, error_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        payload = {
                            creditLimit: validateFiatCurrencyObject(creditLimit),
                            apr: apr,
                            repaymentDuration: validateDurationObject(repaymentDuration),
                            repaymentInterval: validateDurationObject(repaymentInterval),
                            overduePenaltyRate: overduePenaltyRate,
                            bnplAccountNumber: bnplAccountNumber,
                            payerId: payerId,
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.apiClient.post("/integration/bnpl-providers/orders/" + orderId + "/complete", crypto.decamelize(payload))];
                    case 2:
                        res = _b.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 3:
                        error_4 = _b.sent();
                        console.log(error_4);
                        throw error_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Revert the BNPL payment
     * @param orderId - Id of the Order
     */
    Bnpl.prototype.revertPayment = function (orderId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_5;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.apiClient.post("/integration/bnpl-consumers/orders/" + orderId + "/revert", {})];
                    case 1:
                        res = _b.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 2:
                        error_5 = _b.sent();
                        console.log(error_5);
                        throw error_5;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Disbursement
     * @param orderId - Id of the Order
     */
    Bnpl.prototype.disbursement = function (orderId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, error_6;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.apiClient.post("/integration/bnpl-consumers/orders/" + orderId + "/disburse", {})];
                    case 1:
                        res = _b.sent();
                        if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.data)) {
                            throw new Error("Unexpected object");
                        }
                        return [2 /*return*/, res.data.data];
                    case 2:
                        error_6 = _b.sent();
                        console.log(error_6);
                        throw error_6;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Bnpl;
}(CredifyClass));

var CredifyError = /** @class */ (function (_super) {
    __extends(CredifyError, _super);
    function CredifyError(apiError) {
        var _a, _b;
        var _this = _super.call(this) || this;
        _this.status = 0;
        _this.method = "";
        _this.url = "";
        _this.traceId = "";
        var prefix = "credify_server_error";
        if (apiError.response && apiError.response.data) {
            // console.log(apiError.response.data);
            /*
             * The request was made and the server responded with a
             * status code that falls out of the range of 2xx
             */
            var errors = apiError.response.data["errors"] || [];
            if (errors.length === 0) {
                _this.name = prefix + ":" + apiError.response.status;
                _this.message = apiError.response.statusText || "unknown";
            }
            else {
                var e = errors[0];
                _this.name = prefix + ":" + e.code;
                _this.message = ((_a = e.localized_message) === null || _a === void 0 ? void 0 : _a.text) || e.message;
            }
            _this.status = apiError.response.status;
            _this.traceId = ((_b = apiError.response.headers) === null || _b === void 0 ? void 0 : _b.tracer) || "";
            _this.method = apiError.response.config.method || "";
            _this.url = apiError.response.config.url || "";
            // console.log(apiError.response.headers);
        }
        else if (apiError.request) {
            /*
             * The request was made but no response was received, `error.request`
             * is an instance of XMLHttpRequest in the browser and an instance
             * of http.ClientRequest in Node.js
             */
            _this.name = prefix + ":request_error";
            _this.message =
                "The request has failed. Server is not reachable or you are not connected with network.";
            _this.status = 0;
        }
        else {
            // Something happened in setting up the request and triggered an Error
            console.log("Error", apiError.message);
            _this.name = prefix + ":unknown_error";
            _this.message =
                "The request has failed. Server is not reachable or you are not connected with network.";
            _this.status = 0;
        }
        return _this;
    }
    return CredifyError;
}(Error));
var OIDCError = /** @class */ (function (_super) {
    __extends(OIDCError, _super);
    function OIDCError(apiError) {
        var _this = _super.call(this) || this;
        _this.status = 0;
        var prefix = "oidc_server_error";
        if (apiError.response && apiError.response.data) {
            /*
             * The request was made and the server responded with a
             * status code that falls out of the range of 2xx
             */
            var name_1 = apiError.response.data["error"] || "unknown";
            _this.name = prefix + ":" + name_1;
            _this.message = apiError.response.data["error_description"] || "unknown";
            _this.status = apiError.response.status;
            var oidcErrorHint = apiError.response.data["error_hint"] || "unknown";
            console.error({ oidcErrorHint: oidcErrorHint });
            // console.log(apiError.response.headers);
        }
        else if (apiError.request) {
            /*
             * The request was made but no response was received, `error.request`
             * is an instance of XMLHttpRequest in the browser and an instance
             * of http.ClientRequest in Node.js
             */
            console.log(apiError.request);
            _this.name = prefix + ":request_error";
            _this.message =
                "The request has failed. Server is not reachable or you are not connected with network.";
            _this.status = 0;
        }
        else {
            // Something happened in setting up the request and triggered an Error
            console.log("Error", apiError.message);
            _this.name = prefix + ":unknown_error";
            _this.message =
                "The request has failed. Server is not reachable or you are not connected with network.";
            _this.status = 0;
        }
        return _this;
    }
    return OIDCError;
}(Error));

var name = "@credify/nodejs";
var version = "1.21.0";
var description = "Credify Node.js SDK";
var license = "MIT";
var author = "@credify-pte-ltd";
var main = "dist/index.js";
var types = "dist/index.d.ts";
var files = [
	"package.json",
	"README.md",
	"LICENSE",
	"dist",
	"types"
];
var keywords = [
	"credify"
];
var homepage = "https://developers.credify.one";
var scripts = {
	build: "rollup -c",
	watch: "rollup -cw",
	test: "yarn jest --testPathIgnorePatterns /src/__tests__/integration/"
};
var devDependencies = {
	"@babel/core": "^7.12.13",
	"@babel/preset-env": "^7.12.13",
	"@credify/api-docs": "^1.2.7",
	"@rollup/plugin-babel": "^5.2.3",
	"@rollup/plugin-commonjs": "^17.1.0",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^11.1.1",
	"@rollup/plugin-typescript": "^8.1.1",
	"@types/axios": "^0.14.0",
	"@types/faker": "^5.1.5",
	"@types/jest": "^26.0.20",
	"@types/node": "^14.14.21",
	"@types/uuid": "^8.3.4",
	faker: "^5.1.0",
	husky: "^7.0.0",
	jest: "^26.6.3",
	"lodash.camelcase": "^4.3.0",
	"lodash.upperfirst": "^4.3.1",
	rollup: "^2.36.2",
	"rollup-plugin-babel": "^4.4.0",
	"rollup-plugin-delete": "^2.0.0",
	"rollup-plugin-terser": "^7.0.2",
	"rollup-plugin-typescript2": "^0.29.0",
	"ts-jest": "^26.4.4",
	typescript: "^4.1.3"
};
var dependencies = {
	"@credify/crypto": "^1.4.4",
	axios: "^0.21.1",
	"axios-mock-adapter": "^1.19.0"
};
var packageJson = {
	name: name,
	version: version,
	description: description,
	license: license,
	author: author,
	main: main,
	types: types,
	files: files,
	keywords: keywords,
	homepage: homepage,
	scripts: scripts,
	devDependencies: devDependencies,
	dependencies: dependencies
};

var ApiClient = /** @class */ (function () {
    function ApiClient(apiKey, accessToken, config) {
        var api = hosts(config).api;
        var reqObject = {
            baseURL: api + "v1/",
            timeout: 8000,
            headers: {
                "Accept-Language": config.locale || "en-US",
            },
        };
        if (apiKey) {
            // @ts-ignore
            reqObject.headers["X-API-KEY"] = apiKey;
        }
        if (accessToken) {
            // @ts-ignore
            reqObject.headers["Authorization"] = accessToken;
        }
        // @ts-ignore
        reqObject.headers["User-Agent"] = "servicex/nodejs/" + packageJson.version;
        var instance = axios__default['default'].create(reqObject);
        // *** Somehow the request interceptor block the response interceptor and we don't have a use case for using
        // the request interceptor yet so I temporary disable it first and comeback to this issue later when we have use case for it
        // instance.interceptors.request.use((request) => {
        //   return request;
        // });
        instance.interceptors.response.use(function (response) {
            if (response.data &&
                response.headers &&
                response.headers["content-type"] === "application/json") {
                var url = response.config.url || "";
                // UserInfo response should not be using camelize.
                if (url.includes("userinfo"))
                    return response;
                response.data = crypto.camelize(response.data);
            }
            return response;
        });
        this.instance = instance;
    }
    ApiClient.prototype.get = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.instance.get(url, config).catch(function (e) {
                        throw _this.generateError(url, e);
                    })];
            });
        });
    };
    ApiClient.prototype.post = function (url, body, config) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.instance.post(url, body, config).catch(function (e) {
                        throw _this.generateError(url, e);
                    })];
            });
        });
    };
    ApiClient.prototype.formPost = function (url, params, config) {
        return __awaiter(this, void 0, void 0, function () {
            var p, c;
            var _this = this;
            return __generator(this, function (_a) {
                p = new URLSearchParams();
                Object.keys(params).forEach(function (key) {
                    // @ts-ignore
                    p.append(key, params[key]);
                });
                c = {
                    headers: {
                        "content-type": "application/x-www-form-urlencoded",
                    },
                };
                return [2 /*return*/, this.instance.post(url, p, c).catch(function (e) {
                        throw _this.generateError(url, e);
                    })];
            });
        });
    };
    ApiClient.prototype.put = function (url, body, config) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.instance.put(url, body, config).catch(function (e) {
                        throw _this.generateError(url, e);
                    })];
            });
        });
    };
    ApiClient.prototype.delete = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.instance.delete(url, config).catch(function (e) {
                        throw _this.generateError(url, e);
                    })];
            });
        });
    };
    ApiClient.prototype.generateError = function (url, error) {
        if (url.includes("oidc-core.credify")) {
            return new OIDCError(error);
        }
        else {
            return new CredifyError(error);
        }
    };
    return ApiClient;
}());

var Credify = /** @class */ (function () {
    /**
     * Instantiates Credify object
     * @param secret Signing private key (raw PKCS#8 string value).
     * @param accessToken
     * @param config
     * */
    function Credify(secret, accessToken, config) {
        var signing = new crypto.Signing();
        signing.importPrivateKey(secret);
        var apiClient = new ApiClient("", accessToken, config);
        this.entity = new Entity(config, apiClient, signing);
        this.claims = new Claims(config, apiClient, signing);
        this.oidc = new OIDC(config, apiClient, signing);
        this.offer = new Offer(config, apiClient, signing);
        this.auth = new Auth(config, apiClient, signing);
        this.bnpl = new Bnpl(config, apiClient, signing);
        this.accessToken = accessToken.replace("Bearer ", "");
    }
    // Check token's expire time
    Credify.checkTokenExpired = function (accessToken) {
        var _a;
        var tokenInfo = crypto.parseJwt(accessToken);
        var exp = (_a = tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.payload) === null || _a === void 0 ? void 0 : _a.exp;
        var current = Math.floor(new Date().getTime() / 1000); // to seconds
        // Compare with 60 seconds before current
        return exp - 60 < current;
    };
    Credify.create = function (secret, apiKey, config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var defaultConfig, cnf, tmpApiClient, res, accessToken;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this._instance.hasOwnProperty(apiKey) &&
                            !this.checkTokenExpired(this._instance[apiKey].accessToken)) {
                            return [2 /*return*/, this._instance[apiKey]];
                        }
                        defaultConfig = { mode: "sandbox", locale: "en-US" };
                        cnf = config || defaultConfig;
                        tmpApiClient = new ApiClient(apiKey, "", cnf);
                        return [4 /*yield*/, tmpApiClient.post("/token", {})];
                    case 1:
                        res = _c.sent();
                        accessToken = ((_b = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.accessToken) || "";
                        this._instance[apiKey] = new Credify(secret, "Bearer " + accessToken, cnf);
                        return [2 /*return*/, this._instance[apiKey]];
                }
            });
        });
    };
    Credify._instance = {};
    return Credify;
}());

Object.defineProperty(exports, 'generateCommitment', {
    enumerable: true,
    get: function () {
        return crypto.generateCommitment;
    }
});
Object.defineProperty(exports, 'generateJwt', {
    enumerable: true,
    get: function () {
        return crypto.generateJwt;
    }
});
Object.defineProperty(exports, 'parseJwt', {
    enumerable: true,
    get: function () {
        return crypto.parseJwt;
    }
});
Object.defineProperty(exports, 'sha256', {
    enumerable: true,
    get: function () {
        return crypto.sha256;
    }
});
exports.Credify = Credify;
//# sourceMappingURL=index.js.map
