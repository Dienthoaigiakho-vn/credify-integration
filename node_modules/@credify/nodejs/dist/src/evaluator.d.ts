import { ClaimDefinition } from "@credify/api-docs/apiClients/types/apiClients/v1";
import type { Claims, Func, OfferCondition } from "../types";
interface IConditionEvaluator {
    Evaluate(claims: Claims): ConditionEvaluationResult;
}
export declare enum OfferConditionKind {
    UnknownCondition = "UNKNOWN_CONDITION",
    AndCondition = "AND_CONDITION",
    EqualityCondition = "EQUALITY_CONDITION",
    LargerThanCondition = "LARGER_THAN_CONDITION",
    LargerThanOrEqualCondition = "LARGER_THAN_OR_EQUAL_CONDITION",
    LessThanCondition = "LESS_THAN_CONDITION",
    LessThanOrEqualCondition = "LESS_THAN_OR_EQUAL_CONDITION",
    ContainCondition = "CONTAIN_CONDITION",
    InRangeCondition = "IN_RANGE_CONDITION"
}
export declare class ConditionEvaluationResult {
    rank: number | undefined;
    requestedScopes: Array<string> | undefined;
    usedScopes: Array<string> | undefined;
    static New(scope?: string): ConditionEvaluationResult;
}
export declare class ConditionEvaluator {
    static New(condition: OfferCondition): IConditionEvaluator;
    static ExtractClaimValue(claimDef: ClaimDefinition, claims: Claims): Object | null;
    static EvaluateValue<T>(claimValue: any, evaluator: Func<T[], boolean>, conditionValue: any, conditionValue2?: any): boolean;
}
export {};
