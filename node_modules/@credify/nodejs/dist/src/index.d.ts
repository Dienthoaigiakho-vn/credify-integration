import { sha256, generateCommitment, generateJwt, parseJwt } from "@credify/crypto";
import { Entity } from "./entity";
import { Claims } from "./claims";
import { OIDC } from "./oidc";
import { Offer } from "./offer";
import { Auth } from "./auth";
import { Bnpl } from "./bnpl";
import type { CredifyConfig } from "../types";
declare class Credify {
    private static _instance;
    entity: Entity;
    claims: Claims;
    oidc: OIDC;
    offer: Offer;
    auth: Auth;
    bnpl: Bnpl;
    accessToken: string;
    /**
     * Instantiates Credify object
     * @param secret Signing private key (raw PKCS#8 string value).
     * @param accessToken
     * @param config
     * */
    constructor(secret: string, accessToken: string, config: CredifyConfig);
    private static checkTokenExpired;
    static create(secret: string, apiKey: string, config: CredifyConfig): Promise<Credify>;
}
export { Credify, sha256, generateJwt, parseJwt, generateCommitment };
