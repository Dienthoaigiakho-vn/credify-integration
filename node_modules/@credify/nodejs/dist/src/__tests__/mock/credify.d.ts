import { sha256, generateCommitment, generateJwt, parseJwt } from "@credify/crypto";
import { Entity } from "../../entity";
import { Claims } from "../../claims";
import { OIDC } from "../../oidc";
import { Offer } from "../../offer";
import { Auth } from "../../auth";
import type { CredifyConfig } from "../../../types";
export interface CredifyInstance {
    [apiKey: string]: Credify;
}
declare class Credify {
    private static _instance;
    static countCheckExpireTime: number;
    static countCall: number;
    entity: Entity;
    claims: Claims;
    oidc: OIDC;
    offer: Offer;
    auth: Auth;
    accessToken: string;
    /**
     * Instantiates Credify object
     * @param secret Signing private key (raw PKCS#8 string value).
     * @param apiKey
     * @param config
     * */
    constructor(secret: string, accessToken: string, config: CredifyConfig);
    private static checkTokenExpired;
    static create(secret: string, apiKey: string, config: CredifyConfig): Promise<Credify>;
    static reset(): void;
}
export { Credify, sha256, generateJwt, parseJwt, generateCommitment };
