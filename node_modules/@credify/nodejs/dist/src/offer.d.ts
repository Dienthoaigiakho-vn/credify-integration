import { CredifyClass, ProductType } from "./common";
import { EvaluatedOffersList, CampaignDataWithResult, OfferData, EvaluationResult } from "@credify/api-docs/apiClients/types/apiClients/v1";
import { Claims, CompletedBnplProvidersResponse, OfferCondition } from "../types";
import { FiatCurrency, SimulationInput } from "./type";
export declare class Offer extends CredifyClass {
    /**
     * Gets a list of offers after filtering for a specific user.
     * @param id - ID in your service.
     * @param options - phoneNumber (e.g. 32123456789 - no 0 at the head), countryCode (e.g. +84 - needs +), credifyId (ID in Credify system).
     */
    getList(id: string, options?: {
        phoneNumber?: string;
        countryCode?: string;
        credifyId?: string;
        productTypes?: string[];
    }): Promise<EvaluatedOffersList>;
    /**
     * Updates a status of an offer transaction
     * @param id - ID of offer approval
     * @param status - To which status you will update. (PENDING, COMPLETED, FAILED)
     * @param transactionAmount - Optional. Premium value in the case of insurance without VAT
     * @param referenceId - Optional. Reference ID generated inside the service provider
     * @param vat - Optional. value associated with this transaction
     * @returns Promise<boolean>
     */
    updateStatus(id: string, status: string, transactionAmount?: FiatCurrency | null, referenceId?: string | null, vat?: FiatCurrency | null): Promise<boolean>;
    /**
     * Gets a list of campaigns you have created.
     * @param offerStatus - Status of offers (APPROVED, REJECTED, IN_REVIEW)
     * @param campaignStatus - Status of campaigns (APPROVED, REJECTED, IN_REVIEW, ARCHIVED, DRAFT)
     * @returns array of campaign object
     */
    getCampaigns({ offerStatus, campaignStatus, }?: {
        offerStatus?: string;
        campaignStatus?: string;
    }): Promise<CampaignDataWithResult[]>;
    /**
     * Gets a detail of a specified offer
     * @param offerCode
     * @returns Offer detail info
     */
    getOfferDetail(offerCode: string): Promise<OfferData>;
    /**
     * Evaluate offer conditions based on scope definitions and user's claims.
     * @param conditions Offer conditions to evaluate
     * @param requiredCustomScopes Required custom scopes for each levels
     * @param userClaims Value of user claims to evaluate against
     * @returns evaluation result
     */
    evaluateOffer(conditions: OfferCondition[] | any[] | null, requiredCustomScopes: string[][] | any[] | null, userClaims: Claims | null): EvaluationResult;
    /**
     * Get completed bnpl providers
     * @param credifyId credify id
     * @returns Get CompletedBnplProvidersResponse
     */
    getCompletedBnplProviders(credifyId: string): Promise<CompletedBnplProvidersResponse>;
    /**
     * Get bnpl info
     * @param id - ID in your service.
     * @param options - phoneNumber (e.g. 32123456789 - no 0 at the head), countryCode (e.g. +84 - needs +), credifyId (ID in Credify system), phoneTypes (e.g. ["consumer-financing:unsecured-loan:bnpl"]).
     */
    getBNPLInfo(id: string, options?: {
        phoneNumber?: string;
        countryCode?: string;
        credifyId?: string;
        productTypes?: string[];
    }): Promise<any>;
    /**
     * get simulation
     * @param productType - type of product
     * @param providerIds - list provider to filter
     * @param inputs - extra data
     * @returns object
     */
    simulate(productType: ProductType, providerIds: string[], inputs: SimulationInput): Promise<any>;
}
